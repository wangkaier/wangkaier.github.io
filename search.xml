<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java的反射与内省</title>
      <link href="/2016/11/16/java-reflex-introspection/"/>
      <url>/2016/11/16/java-reflex-introspection/</url>
      
        <content type="html"><![CDATA[<h4 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在运行时把类中的属性和方法映射成相应的类，可以动态得获取属性以及调用方法。<br><a id="more"></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得Class对象，Class对象封装了一个java类定义的包名、类名、变量、方法。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Class clazz = Class.forname(packageName + className);</span></span><br><span class="line"><span class="comment">//Class clazz = object.getClass();</span></span><br><span class="line">Class clazz = className.class;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取构造器，有零个或多个参数类型</span></span><br><span class="line">Constuctor constuctor  = clazz.getConstructor(<span class="keyword">new</span> Class[]&#123;paramClazz1,paramClazz2,.....&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过构造器实例化一个对象，有零个或多个参数</span></span><br><span class="line">Object object = constuctor.newInstance(params....);</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接通过Class的newInstance实例化一个对象，但类必须有无参构造方法  </span></span><br><span class="line">Object object = clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取指定公共成员方法</span></span><br><span class="line">Method method = clazz.getMethod(String name, Class&lt;?&gt;... parameterTypes); </span><br><span class="line"><span class="comment">//获取Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共成员方法</span></span><br><span class="line">Method[] methods = getMethods();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Class对象所表示的类或接口的指定已声明方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法 </span></span><br><span class="line">Method method = getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes);</span><br><span class="line"><span class="comment">//获取Class对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法           </span></span><br><span class="line">Method[] methods = getDeclaredMethods();</span><br><span class="line">          </span><br><span class="line"><span class="comment">//对带有指定参数的指定对象调用由此Method对象表示的方法。</span></span><br><span class="line"><span class="comment">//数组参数被自动解包。如果是静态底层方法，obj可以为null。</span></span><br><span class="line"><span class="comment">//如果底层方法所需的形参数为 0，则数组参数长度可以为0或直接为null。</span></span><br><span class="line">method.invoke(Object obj, Object... args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Class对象所表示的类或接口的指定公共成员字段</span></span><br><span class="line">Field field = clazz.getField(fieldName);</span><br><span class="line"><span class="comment">//获取Class对象所表示的类或接口的所有公共成员字段</span></span><br><span class="line">Field[] fields = clazz.getFields();</span><br><span class="line"><span class="comment">//获取Class对象所表示的类或接口的指定成员字段</span></span><br><span class="line">Field field = clazz.getDeclaredField(fieldName);</span><br><span class="line"><span class="comment">//获取Class对象所表示的类或接口的所有成员字段</span></span><br><span class="line">Field[] fields = clazz.getDeclaredFields();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">filed.setObject(value); </span><br><span class="line"><span class="comment">//获得值</span></span><br><span class="line">Object value = field.get(clazz);  </span><br><span class="line"><span class="comment">//获得静态值     </span></span><br><span class="line">Object staticValue = filed.get(Class);</span><br></pre></td></tr></table></figure><h4 id="内省"><a href="#内省" class="headerlink" title="内省"></a>内省</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在运行时操作JavaBean的属性。该类要符合javaBean规范。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建实体类对象</span></span><br><span class="line">Class clazz = className.class</span><br><span class="line">Object object = clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明已知属性</span></span><br><span class="line">PropertyDescriptor pd = <span class="keyword">new</span> PropertyDescriptor(propertyName,Class);     </span><br><span class="line"><span class="comment">//获取setter方法 </span></span><br><span class="line">Method method = pd.getWriterMethod();</span><br><span class="line">method .invoke(object, value);</span><br><span class="line"><span class="comment">//获取getter方法</span></span><br><span class="line">Method method = pd.getReaderMethod();</span><br><span class="line">Object value = method.invoke(object);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取Bean信息</span></span><br><span class="line">BeanInfo beanInfo  = Instospector.getBeanInfo(beanClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取属性数组</span></span><br><span class="line">PropertyDescriptor[] pds = beanInfo .getPropertyDescriptors();</span><br><span class="line"><span class="keyword">for</span>(PropertyDescriptor pd : pds)&#123;</span><br><span class="line"><span class="comment">//找到属性名为propName的属性</span></span><br><span class="line"><span class="keyword">if</span>(propName.equals(pd.getName()))&#123;  </span><br><span class="line"><span class="comment">//获取getter方法</span></span><br><span class="line">    pd.getReadMethod();</span><br><span class="line">    <span class="comment">//获取setter方法</span></span><br><span class="line">    pd.getWriteMethod();              </span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git配置SSH以及常见问题</title>
      <link href="/2016/10/14/git-ssh/"/>
      <url>/2016/10/14/git-ssh/</url>
      
        <content type="html"><![CDATA[<h4 id="一、Git配置SSH"><a href="#一、Git配置SSH" class="headerlink" title="一、Git配置SSH"></a>一、Git配置SSH</h4><p>1、生成ssh秘钥<br><a id="more"></a><br>先在~/.ssh/下查看有无秘钥，没有则ssh-keygen生成。<br>参数 -t 指定密钥类型，默认是 rsa。<br>参数 -C 设置注释文字，比如邮箱。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C &quot;email@mail.com&quot;</span><br></pre></td></tr></table></figure><p>成功后会在~/ssh/下生成id_rsa、id_rsa.pub，前者为私钥，后者为公钥.</p><p>2、测试ssh连接<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>显示You’ve successfully authenticated就是成功了。</p><p>3、在github上添加SSH Key<br>用公钥内容在你的github（网页登录）上新建key，在settings中SSH and GPG keys点击New SSH key去新建。</p><p>4、配置本地git参数<br>参数 –global 表示全局，–local 表示当前， –system表示系统</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"your name"</span></span><br><span class="line">$ git config --global user.email <span class="string">"your email"</span></span><br></pre></td></tr></table></figure><p>ok，下次提交代码就不用输入姓名密码了！</p><h4 id="二、常见问题"><a href="#二、常见问题" class="headerlink" title="二、常见问题"></a>二、常见问题</h4><h5 id="1、ssh可以测试连通github-com，但push时仍要输入账户和密码验证"><a href="#1、ssh可以测试连通github-com，但push时仍要输入账户和密码验证" class="headerlink" title="1、ssh可以测试连通github.com，但push时仍要输入账户和密码验证"></a>1、ssh可以测试连通github.com，但push时仍要输入账户和密码验证</h5><ul><li>原因：git push方式为https，即在克隆仓库或者添加仓库源时url为https://形式。</li><li>https使用账号密码验证身份，ssh使用ssh验证身份，如果使用ssh克隆仓库必须事前已添加ssh key。</li><li>解决：修改为ssh方式，即将仓库源设置为<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:gitname/remotename.git。</li></ul><p>两种方法:<br>①、在.git/config中修改url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url=git@github.com:gitname/remotename.git</span><br></pre></td></tr></table></figure></p><p>②、命令修改remote.origin.url<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --replace-all remote.origin.url git@github.com:username/remotename.git</span><br></pre></td></tr></table></figure></p><p>查看git config<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br></pre></td></tr></table></figure></p><h5 id="2、ssh-Could-not-resolve-hostname-ssh-github-com-Name-or-service-not-known"><a href="#2、ssh-Could-not-resolve-hostname-ssh-github-com-Name-or-service-not-known" class="headerlink" title="2、ssh: Could not resolve hostname ssh.github.com: Name or service not known"></a>2、ssh: Could not resolve hostname ssh.github.com: Name or service not known</h5><ul><li>原因：无法解析主机名ssh.github.com。</li><li>解决：ssh测试连通github.com。<br>方法： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx启动报错/logs/nginx.pid failed</title>
      <link href="/2016/10/04/server-nginx-startError-nginx.pid/"/>
      <url>/2016/10/04/server-nginx-startError-nginx.pid/</url>
      
        <content type="html"><![CDATA[<p>nginx启动报错 /usr/local/nginx/logs/nginx.pid failed (2: No such file or directory)处理方法。</p><ul><li>原因：/usr/local/nginx/logs/下没有nginx.pid文件</li><li>解决：使用nginx -c的参数指定nginx.conf文件的位置<a id="more"></a></li></ul><p>-c 命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-c filename   : set configuration file (default: conf/nginx.conf)</span><br></pre></td></tr></table></figure></p><p>使用nginx -c 命令指定nginx.conf文件的位置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/path/nginx -c /path/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></p><p>比如我的nginx在/usr/local/下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></p><p>然后就可以启动了。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ngin </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android：抽屉菜单+底部导航主页</title>
      <link href="/2016/07/20/android-drawerLayout-viewPager/"/>
      <url>/2016/07/20/android-drawerLayout-viewPager/</url>
      
        <content type="html"><![CDATA[<p>介绍一种常用的android界面效果，抽屉菜单和底部导航主页，效果如下：<br><a id="more"></a></p><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-drawerLayout-viewPager.gif" alt=""><br></center><p>一、实现抽屉菜单</p><p>&nbsp;&nbsp;&nbsp;&nbsp;抽屉菜单就是可以从侧边滑出的菜单。这里用DrawerLayout和ActionBarDrawerToggle实现。DrawerLayout是自带滑动效果的布局。如果再绑定上ActionBarDrawerToggle就也可以通过toolBar监听。好比通过ActionBarDrawerToggle再给抽屉加一个把手。</p><p>1、首先编辑抽屉菜单的布局吧。将DrawerLayout作为根布局，然后依次嵌套主页面布局和抽屉内容布局。注意抽屉内容布局要设置属性android:layout_gravity=”start”才能让DrawerLayout把它当成抽屉内容处理。主页面布局也需要在抽屉内容布局之前。</p><p>实例代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主页面布局--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/main_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/tab_tool_bar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--抽屉菜单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/left_drawer_menu"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"280dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/left_drawer_menu_lv"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、然后在activity中通过ActionBarDrawerToggle给DrawerLayout添加监听事件，ActionBarDrawerToggle实现了DrawerLayout.DrawerListener接口。将ToolBar作为参数传给ActionBarDrawerToggle对象，这样就可以通过点击这个toolBar唤出抽屉。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Toolbar mToolbar;</span><br><span class="line"><span class="keyword">private</span> DrawerLayout mDrawerLayout;</span><br><span class="line"><span class="keyword">private</span> ActionBarDrawerToggle mDrawerToggle;</span><br><span class="line"></span><br><span class="line">mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</span><br><span class="line">mToolbar = (Toolbar) findViewById(R.id.tab_tool_bar);</span><br><span class="line">setSupportActionBar(mToolbar);</span><br><span class="line">getSupportActionBar().setHomeButtonEnabled(<span class="keyword">true</span>);</span><br><span class="line">getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">mDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(</span><br><span class="line">        <span class="keyword">this</span>,                  <span class="comment">/* host Activity */</span></span><br><span class="line">        mDrawerLayout,         <span class="comment">/* DrawerLayout object */</span></span><br><span class="line">        mToolbar,</span><br><span class="line">        R.string.drawer_open,  <span class="comment">/* "open drawer" description for accessibility */</span></span><br><span class="line">        R.string.drawer_close  <span class="comment">/* "close drawer" description for accessibility */</span></span><br><span class="line">) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerClosed</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        invalidateOptionsMenu();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerOpened</span><span class="params">(View drawerView)</span> </span>&#123;</span><br><span class="line">        invalidateOptionsMenu();</span><br><span class="line">        drawerView.setClickable(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">mDrawerToggle.syncState();</span><br><span class="line">mDrawerLayout.addDrawerListener(mDrawerToggle);</span><br></pre></td></tr></table></figure></p><p>二、底部导航主页</p><p>&nbsp;&nbsp;&nbsp;&nbsp;通过ViewPager来实现左右滑动切换页面，通过在界面底部加一组带监听的tab来点击切换页面。页面使用fragment。</p><p>1、在主页面布局添加ViewPager和底部tab。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">将这段代码添加到主页面布局main_content中</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/pager"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/footer_tab"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><p>footer_tab.xml的代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/tomato"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/main_footer_tab"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_first"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_first_img"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"#00000000"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:clickable</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_menu_share"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"first"</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_second"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_second_img"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"#00000000"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:clickable</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_menu_gallery"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"second"</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_third"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ImageButton</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/id_tab_third_img"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"#00000000"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:clickable</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:src</span>=<span class="string">"@drawable/ic_menu_gallery"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:text</span>=<span class="string">"third"</span></span></span><br><span class="line"><span class="tag">                /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、给ViewPager绑定适配器，设置ViewPager的监听事件以及底部tab的监听事件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ViewPager mViewPager;</span><br><span class="line"><span class="keyword">private</span> ViewPagerAdapter mViewPagerAdapter;</span><br><span class="line"><span class="keyword">private</span> LinearLayout mTabFirstLayout;</span><br><span class="line"><span class="keyword">private</span> LinearLayout mTabSecondLayout;</span><br><span class="line"><span class="keyword">private</span> LinearLayout mTabThirdLayout;</span><br><span class="line"><span class="keyword">private</span> ImageButton mTabFirstImg;</span><br><span class="line"><span class="keyword">private</span> ImageButton mTabSecondImg;</span><br><span class="line"><span class="keyword">private</span> ImageButton mTabThirdImg;</span><br><span class="line"></span><br><span class="line">mTabFirstLayout = (LinearLayout) findViewById(R.id.id_tab_first);</span><br><span class="line">mTabSecondLayout = (LinearLayout) findViewById(R.id.id_tab_second);</span><br><span class="line">mTabThirdLayout = (LinearLayout) findViewById(R.id.id_tab_third);</span><br><span class="line">mTabFirstImg = (ImageButton) findViewById(R.id.id_tab_first_img);</span><br><span class="line">mTabSecondImg = (ImageButton) findViewById(R.id.id_tab_second_img);</span><br><span class="line">mTabThirdImg = (ImageButton) findViewById(R.id.id_tab_third_img);</span><br><span class="line">mViewPager = (ViewPager)findViewById(R.id.pager);</span><br><span class="line"></span><br><span class="line">mViewPagerAdapter = <span class="keyword">new</span> ViewPagerAdapter(getSupportFragmentManager());</span><br><span class="line">mViewPager.setAdapter(mViewPagerAdapter);</span><br><span class="line"></span><br><span class="line">mTabFirstLayout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</span><br><span class="line">        mViewPager.setCurrentItem(<span class="number">0</span>);</span><br><span class="line">        resetImg();</span><br><span class="line">        mTabFirstImg.setImageResource(R.drawable.ic_menu_share);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mTabSecondLayout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</span><br><span class="line">        mViewPager.setCurrentItem(<span class="number">1</span>);</span><br><span class="line">        resetImg();</span><br><span class="line">        mTabSecondImg.setImageResource(R.drawable.ic_menu_camera);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mTabThirdLayout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</span><br><span class="line">        mViewPager.setCurrentItem(<span class="number">2</span>);</span><br><span class="line">        resetImg();</span><br><span class="line">        mTabThirdImg.setImageResource(R.drawable.ic_menu_manage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">mViewPager.addOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;&#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> arg0)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> currentItem = mViewPager.getCurrentItem();</span><br><span class="line">        <span class="keyword">switch</span> (currentItem) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                resetImg();</span><br><span class="line">                setTitle(<span class="string">"first"</span>);</span><br><span class="line">                mTabFirstImg.setImageResource(R.drawable.ic_menu_share);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                resetImg();</span><br><span class="line">                setTitle(<span class="string">"second"</span>);</span><br><span class="line">                mTabSecondImg.setImageResource(R.drawable.ic_menu_camera);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                resetImg();</span><br><span class="line">                setTitle(<span class="string">"third"</span>);</span><br><span class="line">                mTabThirdImg.setImageResource(R.drawable.ic_menu_manage);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetImg</span><span class="params">()</span></span>&#123;</span><br><span class="line">    mTabFirstImg.setImageResource(R.drawable.ic_menu_gallery);</span><br><span class="line">    mTabSecondImg.setImageResource(R.drawable.ic_menu_gallery);</span><br><span class="line">    mTabThirdImg.setImageResource(R.drawable.ic_menu_gallery);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(fm);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (position) &#123;</span><br><span class="line">            <span class="keyword">case</span> TAB_INDEX_ONE:</span><br><span class="line">                <span class="keyword">return</span> mFirstFragment;</span><br><span class="line">            <span class="keyword">case</span> TAB_INDEX_TWO:</span><br><span class="line">                <span class="keyword">return</span> mSecondFragment;</span><br><span class="line">            <span class="keyword">case</span> TAB_INDEX_THREE:</span><br><span class="line">                <span class="keyword">return</span> mThirdFragment;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No fragment at position "</span> + position);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> TAB_INDEX_COUNT;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整的MainActivity.java代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.res.Configuration;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentManager;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.app.FragmentPagerAdapter;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.GravityCompat;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewPager;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.widget.DrawerLayout;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.ActionBarDrawerToggle;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.widget.Toolbar;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.AdapterView;</span><br><span class="line"><span class="keyword">import</span> android.widget.ArrayAdapter;</span><br><span class="line"><span class="keyword">import</span> android.widget.ImageButton;</span><br><span class="line"><span class="keyword">import</span> android.widget.LinearLayout;</span><br><span class="line"><span class="keyword">import</span> android.widget.ListView;</span><br><span class="line"><span class="keyword">import</span> android.widget.Toast;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Fragment mFirstFragment = <span class="keyword">new</span> FirstFragment();</span><br><span class="line">    <span class="keyword">private</span> Fragment mSecondFragment = <span class="keyword">new</span> SecondFragment();</span><br><span class="line">    <span class="keyword">private</span> Fragment mThirdFragment = <span class="keyword">new</span> ThirdFragment();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TAB_INDEX_ONE = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TAB_INDEX_TWO = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TAB_INDEX_THREE = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TAB_INDEX_COUNT = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">private</span> ViewPager mViewPager;</span><br><span class="line">    <span class="keyword">private</span> ViewPagerAdapter mViewPagerAdapter;</span><br><span class="line">    <span class="keyword">private</span> LinearLayout mTabFirstLayout;</span><br><span class="line">    <span class="keyword">private</span> LinearLayout mTabSecondLayout;</span><br><span class="line">    <span class="keyword">private</span> LinearLayout mTabThirdLayout;</span><br><span class="line">    <span class="keyword">private</span> ImageButton mTabFirstImg;</span><br><span class="line">    <span class="keyword">private</span> ImageButton mTabSecondImg;</span><br><span class="line">    <span class="keyword">private</span> ImageButton mTabThirdImg;</span><br><span class="line">    <span class="keyword">private</span> Toolbar mToolbar;</span><br><span class="line">    <span class="keyword">private</span> DrawerLayout mDrawerLayout;</span><br><span class="line">    <span class="keyword">private</span> ActionBarDrawerToggle mDrawerToggle;</span><br><span class="line">    <span class="keyword">private</span> LinearLayout mLeftMenuLayout;</span><br><span class="line">    <span class="keyword">private</span> ListView mLeftMenuLv;</span><br><span class="line">    <span class="keyword">private</span> String[] mLeftMenuLvArrays;</span><br><span class="line">    <span class="keyword">private</span> CharSequence mTitle;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initView();</span><br><span class="line">        initLeftDrawer();</span><br><span class="line">        initEvent();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mTabFirstLayout = (LinearLayout) findViewById(R.id.id_tab_first);</span><br><span class="line">        mTabSecondLayout = (LinearLayout) findViewById(R.id.id_tab_second);</span><br><span class="line">        mTabThirdLayout = (LinearLayout) findViewById(R.id.id_tab_third);</span><br><span class="line">        mTabFirstImg = (ImageButton) findViewById(R.id.id_tab_first_img);</span><br><span class="line">        mTabSecondImg = (ImageButton) findViewById(R.id.id_tab_second_img);</span><br><span class="line">        mTabThirdImg = (ImageButton) findViewById(R.id.id_tab_third_img);</span><br><span class="line">        mViewPager = (ViewPager)findViewById(R.id.pager);</span><br><span class="line">        mToolbar = (Toolbar) findViewById(R.id.tab_tool_bar);</span><br><span class="line">        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</span><br><span class="line">        mLeftMenuLayout = (LinearLayout) findViewById(R.id.left_drawer_menu);</span><br><span class="line">        mLeftMenuLv = (ListView) findViewById(R.id.left_drawer_menu_lv);</span><br><span class="line">        mLeftMenuLvArrays = getResources().getStringArray(R.array.menu_array);</span><br><span class="line">        mViewPagerAdapter = <span class="keyword">new</span> ViewPagerAdapter(getSupportFragmentManager());</span><br><span class="line">        mViewPager.setAdapter(mViewPagerAdapter);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initLeftDrawer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mToolbar.setTitleTextColor(Color.parseColor(<span class="string">"#ffffff"</span>));</span><br><span class="line">        setSupportActionBar(mToolbar);</span><br><span class="line">        getSupportActionBar().setHomeButtonEnabled(<span class="keyword">true</span>);</span><br><span class="line">        getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</span><br><span class="line">        mDrawerToggle = <span class="keyword">new</span> ActionBarDrawerToggle(</span><br><span class="line">                <span class="keyword">this</span>,                  <span class="comment">/* host Activity */</span></span><br><span class="line">                mDrawerLayout,         <span class="comment">/* DrawerLayout object */</span></span><br><span class="line">                mToolbar,</span><br><span class="line">                R.string.drawer_open,  <span class="comment">/* "open drawer" description for accessibility */</span></span><br><span class="line">                R.string.drawer_close  <span class="comment">/* "close drawer" description for accessibility */</span></span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerClosed</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">                invalidateOptionsMenu();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawerOpened</span><span class="params">(View drawerView)</span> </span>&#123;</span><br><span class="line">                invalidateOptionsMenu();</span><br><span class="line">                drawerView.setClickable(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        mDrawerToggle.syncState();</span><br><span class="line">        mDrawerLayout.addDrawerListener(mDrawerToggle);</span><br><span class="line">        mLeftMenuLv.setAdapter(<span class="keyword">new</span> ArrayAdapter(</span><br><span class="line">                <span class="keyword">this</span>, android.R.layout.simple_list_item_1, mLeftMenuLvArrays));</span><br><span class="line">        mLeftMenuLv.setOnItemClickListener(<span class="keyword">new</span> DrawerItemClickListener());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initEvent</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mTabFirstLayout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</span><br><span class="line">                mViewPager.setCurrentItem(<span class="number">0</span>);</span><br><span class="line">                resetImg();</span><br><span class="line">                mTabFirstImg.setImageResource(R.drawable.ic_menu_share);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mTabSecondLayout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</span><br><span class="line">                mViewPager.setCurrentItem(<span class="number">1</span>);</span><br><span class="line">                resetImg();</span><br><span class="line">                mTabSecondImg.setImageResource(R.drawable.ic_menu_camera);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mTabThirdLayout.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View arg0)</span> </span>&#123;</span><br><span class="line">                mViewPager.setCurrentItem(<span class="number">2</span>);</span><br><span class="line">                resetImg();</span><br><span class="line">                mTabThirdImg.setImageResource(R.drawable.ic_menu_manage);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        mViewPager.addOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;&#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> arg0)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">int</span> currentItem = mViewPager.getCurrentItem();</span><br><span class="line">                <span class="keyword">switch</span> (currentItem) &#123;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                        resetImg();</span><br><span class="line">                        setTitle(<span class="string">"first"</span>);</span><br><span class="line">                        mTabFirstImg.setImageResource(R.drawable.ic_menu_share);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                        resetImg();</span><br><span class="line">                        setTitle(<span class="string">"second"</span>);</span><br><span class="line">                        mTabSecondImg.setImageResource(R.drawable.ic_menu_camera);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                        resetImg();</span><br><span class="line">                        setTitle(<span class="string">"third"</span>);</span><br><span class="line">                        mTabThirdImg.setImageResource(R.drawable.ic_menu_manage);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resetImg</span><span class="params">()</span></span>&#123;</span><br><span class="line">        mTabFirstImg.setImageResource(R.drawable.ic_menu_gallery);</span><br><span class="line">        mTabSecondImg.setImageResource(R.drawable.ic_menu_gallery);</span><br><span class="line">        mTabThirdImg.setImageResource(R.drawable.ic_menu_gallery);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewPagerAdapter</span> <span class="keyword">extends</span> <span class="title">FragmentPagerAdapter</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewPagerAdapter</span><span class="params">(FragmentManager fm)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(fm);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Fragment <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (position) &#123;</span><br><span class="line">                <span class="keyword">case</span> TAB_INDEX_ONE:</span><br><span class="line">                    <span class="keyword">return</span> mFirstFragment;</span><br><span class="line">                <span class="keyword">case</span> TAB_INDEX_TWO:</span><br><span class="line">                    <span class="keyword">return</span> mSecondFragment;</span><br><span class="line">                <span class="keyword">case</span> TAB_INDEX_THREE:</span><br><span class="line">                    <span class="keyword">return</span> mThirdFragment;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"No fragment at position "</span> + position);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> TAB_INDEX_COUNT;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBackPressed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);</span><br><span class="line">        <span class="keyword">if</span> (drawer.isDrawerOpen(GravityCompat.START)) &#123;</span><br><span class="line">            drawer.closeDrawer(GravityCompat.START);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onBackPressed();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawerItemClickListener</span> <span class="keyword">implements</span> <span class="title">ListView</span>.<span class="title">OnItemClickListener</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(AdapterView&lt;?&gt; parent, View view, <span class="keyword">int</span> position, <span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, mLeftMenuLvArrays[position], Toast.LENGTH_SHORT).show();</span><br><span class="line">            mLeftMenuLv.setItemChecked(position, <span class="keyword">true</span>);</span><br><span class="line">            mDrawerLayout.closeDrawer(mLeftMenuLayout);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(CharSequence title)</span> </span>&#123;</span><br><span class="line">        mTitle = title;</span><br><span class="line">        getSupportActionBar().setTitle(mTitle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When using the ActionBarDrawerToggle, you must call it during</span></span><br><span class="line"><span class="comment">     * onPostCreate() and onConfigurationChanged()...</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onPostCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// Sync the toggle state after onRestoreInstanceState has occurred.</span></span><br><span class="line">        mDrawerToggle.syncState();</span><br><span class="line">        setTitle(<span class="string">"first"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onConfigurationChanged</span><span class="params">(Configuration newConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onConfigurationChanged(newConfig);</span><br><span class="line">        <span class="comment">// Pass any configuration change to the drawer toggls</span></span><br><span class="line">        mDrawerToggle.onConfigurationChanged(newConfig);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>完整的activity_main.xml代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/drawer_layout"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">    <span class="comment">&lt;!--主布局--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/main_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/tab_tool_bar"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:background</span>=<span class="string">"?attr/colorPrimary"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:minHeight</span>=<span class="string">"?attr/actionBarSize"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">android.support.v7.widget.Toolbar</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">android.support.v4.view.ViewPager</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:id</span>=<span class="string">"@+id/pager"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">android.support.v4.view.ViewPager</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/footer_tab"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--侧滑菜单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/left_drawer_menu"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"280dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"@color/white"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"start"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/left_drawer_menu_iv"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"50dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginTop</span>=<span class="string">"5dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:src</span>=<span class="string">"@drawable/ic_menu_gallery"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/left_drawer_menu_user_name_tv"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"30dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textColor</span>=<span class="string">"@color/black"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">"18sp"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/left_drawer_menu_lv"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:dividerHeight</span>=<span class="string">"1.5dp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.v4.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android之Fragment</title>
      <link href="/2016/07/01/android-fragment/"/>
      <url>/2016/07/01/android-fragment/</url>
      
        <content type="html"><![CDATA[<h3 id="Fragment"><a href="#Fragment" class="headerlink" title="Fragment"></a>Fragment</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Fragment（碎片）在Android3.0的时候被引入，主要是给大屏幕设备提供更加灵活的UI支持。当我们在处理复杂的界面时也可以利用Fragment，它可以将界面分割成几个部分，而且自身可以被动态地添加、替换和移除。<br><a id="more"></a></p><h3 id="Fragment的生命周期"><a href="#Fragment的生命周期" class="headerlink" title="Fragment的生命周期"></a>Fragment的生命周期</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Fragment是依存Activity而存在的，因此Fragment的生命周期会收到宿主Activity的生命周期的影响。<br>Fragment的生命周期：</p><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-fragment.png" alt="这里写图片描述"><br></center><h4 id="Fragment的生命周期方法简单描述如下："><a href="#Fragment的生命周期方法简单描述如下：" class="headerlink" title="Fragment的生命周期方法简单描述如下："></a>Fragment的生命周期方法简单描述如下：</h4><ul><li>void onAttach(Context):当Fragment被绑定到Activity上时回调；</li><li>void onCreate(Bundle):当Fragment对象创建的时候回调；</li><li>View onCreateView(LayoutInflater, ViewGroup, Bundle):创建Fragment视图时回调；</li><li>void onActivityCreated(Bundle):当Fragment所在的Activity的onCreate方法执行完成后时调用；</li><li>void onDestoryView():销毁视图时回调，Fragment实例仍存在；</li><li>void onDestory():销毁fragment实例时回调；</li><li>void onDetech():Fragment与Activity解绑时回调。</li></ul><p>Activity与Fragment生命周期的对比：</p><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/activity-fragment.png" alt="这里写图片描述"><br></center><h3 id="Fragment的使用"><a href="#Fragment的使用" class="headerlink" title="Fragment的使用"></a>Fragment的使用</h3><p>①先创建自己的Fragment类，需要继承android.app.Fragment类，然后重写它的几个必要的方法。onCreateView()方法返回一个View对象，这个View就是Fragment要显示的视图。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.fragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.app.Fragment;</span><br><span class="line"><span class="keyword">import</span> android.view.LayoutInflater;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> com.example.test.R;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Rename parameter arguments, choose names that match</span></span><br><span class="line">    <span class="comment">// the fragment initialization parameters, e.g. ARG_ITEM_NUMBER</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM1 = <span class="string">"param1"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ARG_PARAM2 = <span class="string">"param2"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> Rename and change types of parameters</span></span><br><span class="line">    <span class="keyword">private</span> String mParam1;</span><br><span class="line">    <span class="keyword">private</span> String mParam2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required empty public constructor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /</span><br><span class="line">     * 一般用这个方法创建并获取Fragment对象，并传递数据给Fragment</span><br><span class="line">     * 以Bundle的形式传递数据</span><br><span class="line">     * 这种方式使得Fragment的封装性更好</span><br><span class="line">     * <span class="meta">@param</span> param1 Parameter <span class="number">1</span>.</span><br><span class="line">     * <span class="meta">@param</span> param2 Parameter <span class="number">2</span>.</span><br><span class="line">     * <span class="meta">@return</span> A <span class="keyword">new</span> instance of fragment TestFragment.</span><br><span class="line">     */</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestFragment <span class="title">newInstance</span><span class="params">(String param1, String param2)</span> </span>&#123;</span><br><span class="line">        TestFragment fragment = <span class="keyword">new</span> TestFragment();</span><br><span class="line">        Bundle args = <span class="keyword">new</span> Bundle();</span><br><span class="line">        args.putString(ARG_PARAM1, param1);</span><br><span class="line">        args.putString(ARG_PARAM2, param2);</span><br><span class="line">        fragment.setArguments(args);</span><br><span class="line">        <span class="keyword">return</span> fragment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 获取创建Fragment时传递的数据，此处数据类型为String</span></span><br><span class="line">        <span class="keyword">if</span> (getArguments() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mParam1 = getArguments().getString(ARG_PARAM1);</span><br><span class="line">            mParam2 = getArguments().getString(ARG_PARAM2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_test, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onAttach(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDetach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDetach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>②创建Fragment的视图，这里使用静态xml视图，根据实际需求创建自己的布局，fragment_test.xml文件内容如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">"http://schemas.android.com/tools"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">tools:context</span>=<span class="string">"com.example.fragment.TestFragment"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- <span class="doctag">TODO:</span> Update blank fragment layout --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Hello Fragment"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>③在Activity中使用，分为静态使用和动态使用。静态使用不可变，Activity中使用的Fragment是固定的。而动态使用的Fragment可以动态的添加、替换不同的Fragment。 </p><h4 id="静态使用："><a href="#静态使用：" class="headerlink" title="静态使用："></a>静态使用：</h4><p>在Activity的布局文件中添加fragment标签，fragment标签的name属性要设置为Fragment的完整包名， 代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">fragment</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/test_fragment"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"com.example.fragment.TestFragment"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span> /&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/test_tv"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"Activity_text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="动态使用："><a href="#动态使用：" class="headerlink" title="动态使用："></a>动态使用：</h4><p>先在Activity的布局文件中添加FragmentLayout标签，代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">FrameLayout</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/frame_layout"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_weight</span>=<span class="string">"1"</span>/&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/add_fragment_bt"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span>  </span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"80dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"add fragment"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>再在Activity代码中给FrameLayout动态添加Fragment，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.app.FragmentManager;</span><br><span class="line"><span class="keyword">import</span> android.app.FragmentTransaction;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.FrameLayout;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.test.R;</span><br><span class="line"><span class="keyword">import</span> com.example.fragment.TestFragment;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> FrameLayout mFrameLayout;</span><br><span class="line">    <span class="keyword">private</span> Button mAddBt;</span><br><span class="line">    <span class="keyword">private</span> TestFragment mTestFragment;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_test);</span><br><span class="line">        <span class="comment">// 初始化FrameLayout</span></span><br><span class="line">        mFrameLayout = (FrameLayout) findViewById(R.id.frame_layout);</span><br><span class="line">        mAddBt = (Button) findViewById(R.id.add_fragment_bt);</span><br><span class="line">        <span class="comment">// 新建并获取TestFragment对象，同时传递了两个字符串数据给TestFragment对象</span></span><br><span class="line">        mTestFragment = TestFragment.newInstance(<span class="string">"hello"</span>, <span class="string">"fragment"</span>);</span><br><span class="line">        mAddBt.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取FragmentManager对象，用来管理Fragment对象</span></span><br><span class="line">                FragmentManager fragmentManager = getFragmentManager();</span><br><span class="line">                <span class="comment">// 开启事务，类似于数据库中的事务</span></span><br><span class="line">                FragmentTransaction fragmentTransaction = fragmentManager.beginTransaction();</span><br><span class="line">                <span class="comment">// 添加mTestFragment给frame_layout</span></span><br><span class="line">                fragmentTransaction.add(R.id.frame_layout, mTestFragment);</span><br><span class="line">                <span class="comment">// 提交事务</span></span><br><span class="line">                fragmentTransaction.commit();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Fragment的管理"><a href="#Fragment的管理" class="headerlink" title="Fragment的管理"></a>Fragment的管理</h3><h4 id="FragmentManager和FragmentTransaction事务"><a href="#FragmentManager和FragmentTransaction事务" class="headerlink" title="FragmentManager和FragmentTransaction事务"></a>FragmentManager和FragmentTransaction事务</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;Fragment使用FragmentManager对象管理，FragmentManager对象不能直接new，需要用Context.getFragmentManager()方法获取。注意android.app.FragmentManager对应getFragmentManager()，android.support.v4.app.FragmentManager对应getSupportFragmentManager()。<br>&nbsp;&nbsp;&nbsp;&nbsp;Fragment支持事务，可以回滚操作。多步操作在一次提交后也只算一个事务。事务通过getFragmentManager().beginTransaction()开启，返回一个FragmentTransaction对象，在操作完成后需要commit()提交事务。</p><h5 id="FragmentTransaction的几个方法："><a href="#FragmentTransaction的几个方法：" class="headerlink" title="FragmentTransaction的几个方法："></a>FragmentTransaction的几个方法：</h5><ul><li>add()：往容器中添加一个Fragment；</li><li>replace()：使用另一个Fragment替换当前的Fragment；</li><li>remove()：从容器中移除一个Fragment，如果被移除的Fragment没有添加事务到回退栈，那么这个Fragment实例将会被销毁；</li><li>hide() ：隐藏当前的Fragment，将视图设为不可见，实例并不会销毁；</li><li>show()：显示之前隐藏的Fragment，将视图设为可见；</li><li>addToBackStack()：将当前事务添加到回退栈，并不是将fragment添加到回退栈。<br>getFragmentManager().popBackStack()这个函数操作的是栈中的事务，并不是fragment实例。它将栈顶事务出栈，并重现新栈顶事务。</li></ul><h4 id="演示一下"><a href="#演示一下" class="headerlink" title="演示一下"></a>演示一下</h4><p>① 先分别add A，add B，add C后，而且是每添加一个fragment就commit提交一次事务。界面依次叠加显示了first_fragment，second_fragment，thrid_fragment。<br>三个fragment的回调方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">:37.754 8104-8104/com.example.demo D/FirstFragment: onAttach</span><br><span class="line">:37.755 8104-8104/com.example.demo D/FirstFragment: onCreate</span><br><span class="line">:37.755 8104-8104/com.example.demo D/FirstFragment: onCreateView</span><br><span class="line">:37.759 8104-8104/com.example.demo D/FirstFragment: onStart</span><br><span class="line">:37.759 8104-8104/com.example.demo D/FirstFragment: onResume</span><br><span class="line"></span><br><span class="line">:40.535 8104-8104/com.example.demo D/SecondFragment: onAttach</span><br><span class="line">:40.535 8104-8104/com.example.demo D/SecondFragment: onCreate</span><br><span class="line">:40.535 8104-8104/com.example.demo D/SecondFragment: onCreateView</span><br><span class="line">:40.538 8104-8104/com.example.demo D/SecondFragment: onStart</span><br><span class="line">:40.539 8104-8104/com.example.demo D/SecondFragment: onResume</span><br><span class="line"></span><br><span class="line">:42.347 8104-8104/com.example.demo D/ThirdFragment: onAttach</span><br><span class="line">:42.347 8104-8104/com.example.demo D/ThirdFragment: onCreate</span><br><span class="line">:42.348 8104-8104/com.example.demo D/ThirdFragment: onCreateView</span><br><span class="line">:42.353 8104-8104/com.example.demo D/ThirdFragment: onStart</span><br><span class="line">:42.353 8104-8104/com.example.demo D/ThirdFragment: onResume</span><br></pre></td></tr></table></figure></p><p>当执行三次popBackStack()后，三个fragment依次销毁视图和实例即栈顶事务出栈并显示上一次事务，回调各自的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">:14.985 8104-8104/com.example.demo D/ThirdFragment: onPause</span><br><span class="line">:14.985 8104-8104/com.example.demo D/ThirdFragment: onStop</span><br><span class="line">:14.985 8104-8104/com.example.demo D/ThirdFragment: onDestroyView</span><br><span class="line">:14.985 8104-8104/com.example.demo D/ThirdFragment: onDestroy</span><br><span class="line">:14.985 8104-8104/com.example.demo D/ThirdFragment: onDetach</span><br><span class="line"></span><br><span class="line">:17.283 8104-8104/com.example.demo D/SecondFragment: onPause</span><br><span class="line">:17.284 8104-8104/com.example.demo D/SecondFragment: onStop</span><br><span class="line">:17.284 8104-8104/com.example.demo D/SecondFragment: onDestroyView</span><br><span class="line">:17.284 8104-8104/com.example.demo D/SecondFragment: onDestroy</span><br><span class="line">:17.284 8104-8104/com.example.demo D/SecondFragment: onDetach</span><br><span class="line"></span><br><span class="line">:17.922 8104-8104/com.example.demo D/FirstFragment: onPause</span><br><span class="line">:17.922 8104-8104/com.example.demo D/FirstFragment: onStop</span><br><span class="line">:17.922 8104-8104/com.example.demo D/FirstFragment: onDestroyView</span><br><span class="line">:17.922 8104-8104/com.example.demo D/FirstFragment: onDestroy</span><br><span class="line">:17.922 8104-8104/com.example.demo D/FirstFragment: onDetach</span><br></pre></td></tr></table></figure></p><p>一次add三个fragment后，再commit提交事务后，popBackStack( )一次三个fragment全部被销毁视图和实例。</p><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-fragment-1.gif" alt="这里写图片描述"><br></center><br>②先add B，执行如下代码，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager().beginTransaction().add(R.id.frame_layout, mSecondFragment).addToBackStack(<span class="keyword">null</span>).commit();</span><br></pre></td></tr></table></figure><br><br>将second_fragment添加到容器中，再replace A,执行如下代码，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager().beginTransaction().replace(R.id.frame_layout, mFirstFragment).addToBackStack(<span class="keyword">null</span>).commit();</span><br></pre></td></tr></table></figure><br><br>可看到second_fragment被替换成first_fragment，且视图没有覆盖，replace()相当于remove()+add()。<br>回调如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">:46.979 8051-8051/com.example.demo D/SecondFragment: onAttach</span><br><span class="line">:46.979 8051-8051/com.example.demo D/SecondFragment: onCreate</span><br><span class="line">:46.979 8051-8051/com.example.demo D/SecondFragment: onCreateView</span><br><span class="line">:46.983 8051-8051/com.example.demo D/SecondFragment: onStart</span><br><span class="line">:46.983 8051-8051/com.example.demo D/SecondFragment: onResume</span><br><span class="line"></span><br><span class="line">:49.563 8051-8051/com.example.demo D/SecondFragment: onPause</span><br><span class="line">:49.563 8051-8051/com.example.demo D/SecondFragment: onStop</span><br><span class="line">:49.563 8051-8051/com.example.demo D/SecondFragment: onDestroyView</span><br><span class="line"></span><br><span class="line">:49.563 8051-8051/com.example.demo D/FirstFragment: onAttach</span><br><span class="line">:49.564 8051-8051/com.example.demo D/FirstFragment: onCreate</span><br><span class="line">:49.564 8051-8051/com.example.demo D/FirstFragment: onCreateView</span><br><span class="line">:49.567 8051-8051/com.example.demo D/FirstFragment: onStart</span><br><span class="line">:49.567 8051-8051/com.example.demo D/FirstFragment: onResume</span><br></pre></td></tr></table></figure><br><br>然后popBackStack( )一次，FirstFragment被销毁视图和实例，SecondFragment的视图被重新创建，说明replace后并没有销毁原来fragment的实例，只是销毁了它的视图，再popBackStack( )一次，SecondFragment被销毁视图和实例。<br>回调如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">:53.018 8051-8051/com.example.demo D/FirstFragment: onPause</span><br><span class="line">:53.018 8051-8051/com.example.demo D/FirstFragment: onStop</span><br><span class="line">:53.018 8051-8051/com.example.demo D/FirstFragment: onDestroyView</span><br><span class="line">:53.018 8051-8051/com.example.demo D/FirstFragment: onDestroy</span><br><span class="line">:53.018 8051-8051/com.example.demo D/FirstFragment: onDetach</span><br><span class="line"></span><br><span class="line">:53.018 8051-8051/com.example.demo D/SecondFragment: onCreateView</span><br><span class="line">:53.021 8051-8051/com.example.demo D/SecondFragment: onStart</span><br><span class="line">:53.022 8051-8051/com.example.demo D/SecondFragment: onResume</span><br><span class="line">:53.902 8051-8051/com.example.demo D/SecondFragment: onPause</span><br><span class="line">:53.902 8051-8051/com.example.demo D/SecondFragment: onStop</span><br><span class="line">:53.902 8051-8051/com.example.demo D/SecondFragment: onDestroyView</span><br><span class="line">:53.902 8051-8051/com.example.demo D/SecondFragment: onDestroy</span><br><span class="line">:53.902 8051-8051/com.example.demo D/SecondFragment: onDetach</span><br></pre></td></tr></table></figure><br><br><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-fragment-2.gif" alt="这里写图片描述"><br></center><br>③先add B，添加second_fragment到容器中，再remove B，从容器中移除second_fragment，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getFragmentManager().beginTransaction().remove(mSecondFragment).addToBackStack(<span class="keyword">null</span>).commit();</span><br></pre></td></tr></table></figure><br><br>回调如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:31:11.645 8051-8051/com.example.demo D/SecondFragment: onAttach</span><br><span class="line">:31:11.645 8051-8051/com.example.demo D/SecondFragment: onCreate</span><br><span class="line">:31:11.645 8051-8051/com.example.demo D/SecondFragment: onCreateView</span><br><span class="line">:31:11.649 8051-8051/com.example.demo D/SecondFragment: onStart</span><br><span class="line">:31:11.649 8051-8051/com.example.demo D/SecondFragment: onResume</span><br><span class="line"></span><br><span class="line">:31:13.178 8051-8051/com.example.demo D/SecondFragment: onPause</span><br><span class="line">:31:13.178 8051-8051/com.example.demo D/SecondFragment: onStop</span><br><span class="line">:31:13.179 8051-8051/com.example.demo D/SecondFragment: onDestroyView</span><br></pre></td></tr></table></figure><br><br>然后popBackStack()一次,remove B的那次事务被弹出栈，add B的那次事务回到栈顶，second_fragment视图被重新创建。当再popBackStack()一次后它的视图和实例都被销毁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:32:12.990 8051-8051/com.example.demo D/SecondFragment: onCreateView</span><br><span class="line">:32:12.993 8051-8051/com.example.demo D/SecondFragment: onStart</span><br><span class="line">:32:12.993 8051-8051/com.example.demo D/SecondFragment: onResume</span><br><span class="line"></span><br><span class="line">:32:27.762 8051-8051/com.example.demo D/SecondFragment: onPause</span><br><span class="line">:32:27.762 8051-8051/com.example.demo D/SecondFragment: onStop</span><br><span class="line">:32:27.762 8051-8051/com.example.demo D/SecondFragment: onDestroyView</span><br><span class="line">:32:27.762 8051-8051/com.example.demo D/SecondFragment: onDestroy</span><br><span class="line">:32:27.762 8051-8051/com.example.demo D/SecondFragment: onDetach</span><br></pre></td></tr></table></figure><br><br><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-fragment-3.gif" alt="这里写图片描述"><br></center>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android之五种数据存储方式</title>
      <link href="/2016/06/29/android-data-store/"/>
      <url>/2016/06/29/android-data-store/</url>
      
        <content type="html"><![CDATA[<p>下面将介绍Android的五种数据存储方式，包括文件存储、SharePreferences存储、SQLite数据库存储、ContentProvider存储、网络存储。<br><a id="more"></a></p><h3 id="1-文件存储"><a href="#1-文件存储" class="headerlink" title="1. 文件存储"></a>1. 文件存储</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Android中的文件存储与java中IO存储类似，生成的文件在/data/data/&lt; package-name&gt;/files目录下。</p><h4 id="1-1-写入文件"><a href="#1-1-写入文件" class="headerlink" title="1.1 写入文件"></a>1.1 写入文件</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;先调用Context.openFileOutput(filename, mode)方法，该方法会返回一个FileOutputStream对象，再通过FileOutputStream对象的write()方法写入数据，最后必须调用FileOutputStream对象的close()方法关闭流。<br>Context.openFileOutput(filename, mode)方法的两个参数中，file为文件名，namemode参数用于指定操作模式。</p><h5 id="mode四种模式如下："><a href="#mode四种模式如下：" class="headerlink" title="mode四种模式如下："></a>mode四种模式如下：</h5><ul><li>Context.MODE_PRIVATE   为默认操作模式，私有文件，且写入的内容会覆盖原文件的内容；</li><li>Context.MODE_APPEND   该模式会检查文件是否存在，存在就在文件末尾追加内容，否则就创建新文件；　</li><li>Context.MODE_WORLD_READABLE  表示当前文件可以被其他应用读取，但不能写；</li><li>Context.MODE_WORLD_WRITEABLE 表示当前文件可以被其他应用读、写。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String filename= <span class="string">"test.txt"</span>;</span><br><span class="line">String data= <span class="string">"123456abcdef"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileOutputStream out= openFileOutput(filename, Context.MODE_PRIVATE);</span><br><span class="line">    out.write(data.getBytes());</span><br><span class="line">    <span class="comment">// 关闭流</span></span><br><span class="line">    out.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-读取文件"><a href="#1-2-读取文件" class="headerlink" title="1.2 读取文件"></a>1.2 读取文件</h5><p>&nbsp;&nbsp;&nbsp;&nbsp;先调用Context.openFileInput(filename)方法，该方法会返回一个FileInputStream对象。然后使用流对象的read()方法读取字节，最后必须调用流的close()方法关闭流。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">String filename = <span class="string">"test.txt"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    FileInputStream in = openFileInput(filename);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    StringBuilder sBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">while</span> ((len = in.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        sBuilder.append(<span class="keyword">new</span> String(buf, <span class="number">0</span>, len));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 关闭流</span></span><br><span class="line">    in.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-SharePreferences存储"><a href="#2-SharePreferences存储" class="headerlink" title="2. SharePreferences存储"></a>2. SharePreferences存储</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;SharePreferences使用键值对的方式来存储数据。这种方法适合保存少量的简单格式数据，如字符串型、基本类型的值。比如应用程序的配置信息，生成的数据文件保存为/data/data/&lt; package-name&gt;/shared_prefs/路径下的file_name.xml。<br>&nbsp;&nbsp;&nbsp;&nbsp;但SharedPreferences只能获取数据而不支持存储和修改,存储和修改需要通过SharedPreferences.edit()获取的内部接口Editor对象实现。SharedPreferences无法直接创建实例，只能通过Context.getSharedPreferences(String name, int mode)方法来获取SharedPreferences实例，该方法参数中name表示要操作的文件名，mode为操作模式。</p><h4 id="mode操作模式："><a href="#mode操作模式：" class="headerlink" title="mode操作模式："></a>mode操作模式：</h4><ul><li>Context.MODE_PRIVATE  数据只能被本应用读、写；</li><li>Context.MODE_WORLD_READABLE  数据能被其他应用读，但不能写；</li><li>Context.MODE_WORLD_WRITEABLE  数据能被其他应用读、写；</li><li>Context.MODE_MULTI_PROCESS 数据可被多个程序共享,使用前会检查数据是否被更改。</li></ul><p>实例代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">SharedPreferences pref = Context.getSharedPreferences(<span class="string">"userdata"</span>,Context.MODE_PRIVATE);</span><br><span class="line">SharedPreferences.Editor editor= pref.edit();</span><br><span class="line"><span class="comment">//从SharedPreferences文件中以键名读取数据</span></span><br><span class="line">String account = pref.getString(<span class="string">"account"</span>,<span class="string">""</span>);</span><br><span class="line">String password = pref.getString(<span class="string">"password"</span>,<span class="string">""</span>);</span><br><span class="line"><span class="comment">//往SharedPreferences文件中以键值对形式写入数据</span></span><br><span class="line">editor.putString(<span class="string">"account"</span>, <span class="string">"xiaoming"</span>);</span><br><span class="line">editor.putString(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">//editor.clear(); 清除SharedPreferences文件中所有数据</span></span><br><span class="line"><span class="comment">//editor.remove(String key); 从SharedPreferences文件中以键名删除数据</span></span><br><span class="line"><span class="comment">//commit()提交修改</span></span><br><span class="line">editor.commit();</span><br></pre></td></tr></table></figure></p><p>生成userdata.xml文件内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=”1.0″ encoding=”UTF-8″?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"account"</span>&gt;</span>xiaoming<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-SQLite数据库存储"><a href="#3-SQLite数据库存储" class="headerlink" title="3. SQLite数据库存储"></a>3. SQLite数据库存储</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;SQLite是Android中的轻量级数据库，支持SQL语法。这种方式存储的数据在/data/data/&lt; package-name&gt;/database路径下。<br>①先创建一个DbOpenHelper 类，它继承android.database.sqlite.SQLiteDatabase，用于创建数据库和更新数据库。<br>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.database;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteOpenHelper;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbOpenHelper</span> <span class="keyword">extends</span> <span class="title">SQLiteOpenHelper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String CREATE_MSG = <span class="string">"CREATE TABLE user_info("</span> +</span><br><span class="line">    <span class="string">"user_id INTEGER PRIMARY KEY AUTOINCREMENT,"</span> +</span><br><span class="line">    <span class="string">"user_name TEXT,"</span> +</span><br><span class="line">    <span class="string">"user_sex  INT);"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">dbOpenHelper</span><span class="params">(Context context, String name, SQLiteDatabase.CursorFactory factory, <span class="keyword">int</span> version)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, name, factory, version);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 创建数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(SQLiteDatabase db)</span> </span>&#123;</span><br><span class="line">        db.execSQL(CREATE_MSG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 更新数据库版本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onUpgrade</span><span class="params">(SQLiteDatabase db, <span class="keyword">int</span> oldVersion, <span class="keyword">int</span> newVersion)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>②创建Db操作类，完成增删查改方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.database;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.database.sqlite.SQLiteDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDb</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DB_VERSION = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SQLiteDatabase db;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> UserDb msgDb;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String DB_NAME = <span class="string">"user_info"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDb</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        DbOpenHelper dbHelper = <span class="keyword">new</span> DbOpenHelper(context, DB_NAME, <span class="keyword">null</span>, DB_VERSION);</span><br><span class="line">        db = dbHelper.getWritableDatabase();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取数据库对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> UserDb <span class="title">getInstance</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(msgDb == <span class="keyword">null</span>) &#123;</span><br><span class="line">            msgDb = <span class="keyword">new</span> UserDb(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> msgDb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     * User为自定义数据模型类，为该示例代码的数据类型,相关代码较为简单没有给出</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">saveUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">values.put(<span class="string">"user_name"</span>, user.getmUserName());</span><br><span class="line">    values.put(<span class="string">"user_sex"</span>, user.getmUserSex());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">db.insert(<span class="string">"user_info"</span>, <span class="keyword">null</span>, values);</span><br><span class="line"><span class="comment">// 也可以自己写SQL语句，用SQLiteDatabase.execSQL(SQL)执行</span></span><br><span class="line"><span class="comment">// db.execSQL("insert into user_info(name, sex) values(?,?)", new String[]&#123;user.getmUserName(), user.getmUserSex()&#125;); </span></span><br><span class="line">&#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 查询数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">queryUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ArrayList&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">    Cursor cursor = db.query(<span class="string">"user_info"</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">// 遍历返回的数据集</span></span><br><span class="line">    <span class="keyword">if</span>(cursor.moveToFirst()) &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">User user = <span class="keyword">new</span> User();</span><br><span class="line">user.setmUserId(cursor.getInt(cursor.getColumnIndex(<span class="string">"user_id"</span>)));</span><br><span class="line">user.setmUserSex(cursor.getString(cursor.getColumnIndex(<span class="string">"user_sex"</span>)));</span><br><span class="line">user.setmUserName(cursor.getString(cursor.getColumnIndex(<span class="string">"user_name"</span>)));</span><br><span class="line">list.add(user);</span><br><span class="line">    &#125; <span class="keyword">while</span>(cursor.moveToNext());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 必须关闭cursor</span></span><br><span class="line">    cursor.close();</span><br><span class="line"><span class="keyword">return</span> list ;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 删除数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">DelUser</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">db.delete(<span class="string">"user_info"</span>, <span class="string">"user_id = ?"</span>, <span class="keyword">new</span> String[]&#123;userId&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">UpdateUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(user != <span class="keyword">null</span>) &#123;</span><br><span class="line">    ContentValues values = <span class="keyword">new</span> ContentValues();</span><br><span class="line">values.put(<span class="string">"user_name"</span>, user.getmUserName());</span><br><span class="line">    values.put(<span class="string">"user_sex"</span>, user.getmUserSex());</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">db.update(<span class="string">"user_info"</span>, values, <span class="string">"user_id = ?"</span>, <span class="keyword">new</span> String[]&#123;user.getUserId&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SQLiteDatabase提供的增删查改方法和SQL语句执行方法参数和返回值如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入数据</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">insert</span><span class="params">(String table,String nullColumnHack,ContentValues values)</span></span></span><br><span class="line"><span class="function"><span class="comment">//删除数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String table,String whereClause,String[] whereArgs)</span></span></span><br><span class="line"><span class="function"><span class="comment">//查询数据</span></span></span><br><span class="line"><span class="function">Cursor <span class="title">query</span><span class="params">(String table, String[] columns, String selection, String[] selectionArgs, String groupBy, String having, String orderBy, String limit)</span></span></span><br><span class="line"><span class="function"><span class="comment">//更新数据</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String table, ContentValues values, String whereClause, String[] whereArgs)</span></span></span><br><span class="line"><span class="function"><span class="comment">//执行SQL语句</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">execSQL</span><span class="params">(String sql)</span></span></span><br></pre></td></tr></table></figure></p><h3 id="4-ContentProvider存储"><a href="#4-ContentProvider存储" class="headerlink" title="4. ContentProvider存储"></a>4. ContentProvider存储</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;ContentProvider（内容提供者）其为存储和获取数据提供统一的接口，使不同的应用程序之间可以共享数据。其以Uri的形式对外提供数据的访问操作接口，而其他应用则通过ContentResolver类对象根据Uri去访问指定的数据。<br><em>详情参考</em><a href="/2016/08/28/android-contentProvider/">《Android之ContentProvider》</a></p><h3 id="5-网络存储"><a href="#5-网络存储" class="headerlink" title="5. 网络存储"></a>5. 网络存储</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;网络存储其实就是Android应用通过访问网络从服务器获取数据和存入数据，主要是掌握Android的网络访问。android.net.*包提供了网络访问方法，还有很多第三方网络访问框架，比如 Volley、OkHttp等。客户端与服务器通信的数据格式一般为JSON、XML和HTML，我们可以利用相关工具类进行转换。</p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android之Content Provider</title>
      <link href="/2016/06/28/android-contentProvider/"/>
      <url>/2016/06/28/android-contentProvider/</url>
      
        <content type="html"><![CDATA[<h3 id="Content-Provider"><a href="#Content-Provider" class="headerlink" title="Content Provider"></a>Content Provider</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Content Provider是Android四大组件之一，其为存储和获取数据提供统一的接口。使不同的应用程序之间可以共享数据。其以Uri的形式<br><a id="more"></a><br>对外提供数据的访问操作接口，而其他应用则通过ContentResolver类对象根据Uri去访问指定的数据。当某个应用通过Content Provider提供了自己的数据接口，不管该应用程序是否启动，其他程序都可以通过该接口来操作其内部的数据。<br>&nbsp;&nbsp;&nbsp;&nbsp;Android为我们提供了多种ContentProvider，比如通讯录、多媒体等，当然我们也可以创建自己的ContentProvider。</p><h3 id="Content-Provider的应用"><a href="#Content-Provider的应用" class="headerlink" title="Content Provider的应用"></a>Content Provider的应用</h3><h4 id="①URI"><a href="#①URI" class="headerlink" title="①URI"></a>①URI</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;URI是统一资源标识符，是一个用于标识某一互联网资源名称的字符串。 该种标识允许用户对任何（包括本地和互联网）的资源通过特定的协议进行交互操作。URI由包括确定语法和相关协议的方案所定义。有三个组成部分：访问资源的命名机制、存放资源的主机名、资源自身的名称。<br>比如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">URI格式为 scheme:<span class="comment">//authority/path</span></span><br><span class="line"></span><br><span class="line">举例为 content:<span class="comment">//com.myapp.mycontentprovider/tablename/id</span></span><br><span class="line"></span><br><span class="line">①scheme为固定前缀：  content:<span class="comment">//</span></span><br><span class="line">②Authority是一个ContentProvider的唯一标识，外部调用者可以根据这个标识来找到它： com.myapp.mycontentprovider</span><br><span class="line">③path表示我们要操作的数据，可以是表名，也可以是文件名:  tablename</span><br><span class="line">④path后也可以加上id或name，定位到某一行数据，不加的话就是表中所有数据</span><br></pre></td></tr></table></figure></p><p>URI的两个工具类：<br>UriMatcher：用于匹配Uri，匹配后返回结果码。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Uri uri= Uri.parse(<span class="string">"content://com.myapp.mycontentprovider/tablename"</span>);</span><br><span class="line"><span class="comment">/* 自定义匹配码 */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> NOPARAM  = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> PARAM  = <span class="number">2</span>;</span><br><span class="line"><span class="comment">//常量UriMatcher.NO_MATCH表示不匹配任何路径的返回码</span></span><br><span class="line">UriMatcher uriMatcher = <span class="keyword">new</span> UriMatcher(UriMatcher.NO_MATCH);</span><br><span class="line"><span class="comment">//如果用match()方法匹配content://com.myapp.mycontentprovider/tablename，返回匹配码为NOPARAM</span></span><br><span class="line"><span class="comment">// 注册uri</span></span><br><span class="line">uriMatcher .addURI(<span class="string">"com.myapp.mycontentprovider"</span>, <span class="string">"tablename"</span>, NOPARAM);</span><br><span class="line"><span class="comment">//如果用match()方法匹配content://com.com.myapp.mycontentprovider/tablename/id路径，返回匹配码为PARAM</span></span><br><span class="line">uriMatcher.addURI(<span class="string">"com.myapp.mycontentprovider"</span>, <span class="string">"tablename/#"</span>, PARAM);</span><br><span class="line"><span class="comment">// #号为数字通配符</span></span><br><span class="line"><span class="keyword">switch</span> (uriMatcher.match(uri)) &#123; </span><br><span class="line">   <span class="keyword">case</span> NOPARAM:</span><br><span class="line"> <span class="comment">//</span></span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">case</span> PARAM:</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">   <span class="keyword">default</span>:</span><br><span class="line">     <span class="comment">//</span></span><br><span class="line">     <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ContentUris：用于操作Uri路径后面的Id部分。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给uri加上id</span></span><br><span class="line">Uri uri = Uri.parse(<span class="string">"content://com.myapp.mycontentprovider/tablename"</span>);</span><br><span class="line">Uri resultUri = ContentUris.withAppendedId(uri, <span class="number">1</span>); </span><br><span class="line"><span class="comment">//生成后的Uri为：content://com.myapp.mycontentprovider/tablename/1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取uri后的id</span></span><br><span class="line">Uri uri = Uri.parse(<span class="string">"content://com.myapp.mycontentprovider/tablename/1"</span>)</span><br><span class="line"><span class="keyword">long</span> id = ContentUris.parseId(uri);</span><br><span class="line"><span class="comment">// id为1</span></span><br></pre></td></tr></table></figure></p><h4 id="②创建自己的Conten-Provider"><a href="#②创建自己的Conten-Provider" class="headerlink" title="②创建自己的Conten Provider"></a>②创建自己的Conten Provider</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;创建自己的Content Provider首先继承android.content.ContentProvider类，再重写它的几个方法。主要是对数据的增删查改方法，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.content.ContentProvider;</span><br><span class="line"><span class="keyword">import</span> android.content.ContentValues;</span><br><span class="line"><span class="keyword">import</span> android.database.Cursor;</span><br><span class="line"><span class="keyword">import</span> android.net.Uri;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContentProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyContentProvider</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Uri uri, String selection, String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Implement this to handle requests to delete one or more rows.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回MIME类型的字符串</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">(Uri uri)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement this to handle requests for the MIME type of the data</span></span><br><span class="line">        <span class="comment">// at the given URI.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">insert</span><span class="params">(Uri uri, ContentValues values)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement this to handle requests to insert a new row.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement this to initialize your content provider on startup.</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cursor <span class="title">query</span><span class="params">(Uri uri, String[] projection, String selection,String[] selectionArgs, String sortOrder)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement this to handle query requests from clients.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//更新数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Uri uri, ContentValues values, String selection,String[] selectionArgs)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// <span class="doctag">TODO:</span> Implement this to handle requests to update one or more rows.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"Not yet implemented"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="③注册Content-Provider"><a href="#③注册Content-Provider" class="headerlink" title="③注册Content Provider"></a>③注册Content Provider</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在创建完自己的ContentProvider后，要到AndroidManifest.xml文件进行注册。代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">provider</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:name</span>=<span class="string">"com.myapp.MyContentProvider"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:authorities</span>=<span class="string">"com.myapp.mycontentprovider"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">provider</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="④Content-Resolver"><a href="#④Content-Resolver" class="headerlink" title="④Content Resolver"></a>④Content Resolver</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;在别的应用中，我们使用Content Resolver类来获取和操作ContentProvider提供的数据。ContentResolver类中提供了和ContentProvider类中签名一样的方法。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">uri = Uri.parse(<span class="string">"content://com.test.mycontentprovider/test"</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取ContentResolver对象</span></span><br><span class="line">ContentResolver contentResolver = getContentResolver();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">ContentValues contentValues = <span class="keyword">new</span> ContentValues();</span><br><span class="line">contentValues.put(<span class="string">"name"</span>, <span class="string">"ResolverTest"</span>);</span><br><span class="line">Uri uri = contentResolver.insert(uri, contentValues);</span><br><span class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>, uri.toString(), Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找所有数据，contentResolver.query返回的是一个结果集</span></span><br><span class="line">cursor = contentResolver.query(uri, <span class="keyword">null</span>, <span class="keyword">null</span>,<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">while</span>(cursor.moveToNext())&#123;</span><br><span class="line">    <span class="keyword">int</span> name = cursor.getColumnIndex(<span class="string">"name"</span>);</span><br><span class="line">    Toast.makeText(MainActivity.<span class="keyword">this</span>, cursor.getString(name), Toast.LENGTH_SHORT).show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找id为1的数据</span></span><br><span class="line">cursor = contentResolver.query(uri, <span class="keyword">null</span>, <span class="string">"_ID=?"</span>, <span class="keyword">new</span> String[] &#123; <span class="string">"1"</span> &#125;, <span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//这里要调用cursor.moveToFirst将游标移动到第一条数据</span></span><br><span class="line"><span class="keyword">if</span> (cursor.moveToFirst() == <span class="keyword">false</span>) &#123;</span><br><span class="line">    <span class="comment">// Cursor为空</span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> name = cursor.getColumnIndex(<span class="string">"name"</span>);</span><br><span class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>, cursor.getString(name), Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新数据</span></span><br><span class="line">contentValues.put(<span class="string">"name"</span>, <span class="string">"Resolver_2"</span>);</span><br><span class="line">uri = contentResolver.update(uri, contentValues, <span class="string">"_ID=?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>&#125;);</span><br><span class="line">Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"updated"</span>+<span class="string">":"</span>+uri, Toast.LENGTH_LONG).show();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除id为1的数据</span></span><br><span class="line">contentResolver.delete(uri, <span class="string">"_ID=?"</span>, <span class="keyword">new</span> String[]&#123;<span class="string">"1"</span>&#125;);</span><br><span class="line">     </span><br><span class="line">cursor.close();</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android之Broadcast Receiver</title>
      <link href="/2016/06/27/android-broadcastReceiver/"/>
      <url>/2016/06/27/android-broadcastReceiver/</url>
      
        <content type="html"><![CDATA[<h3 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Android系统或应用程序会在产生某个事件时发送广播，比如网络状态改变、开机、电量改变和接收短信等。应用程序可以监听这些广播并做处理。<br><a id="more"></a></p><h3 id="Broadcast-Receiver"><a href="#Broadcast-Receiver" class="headerlink" title="Broadcast Receiver"></a>Broadcast Receiver</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Broadcast Receiver是Android四大组件之一，用来接收并响应来自系统和应用中的广播。通常一个广播可以被多个广播接收者所接收。</p><h3 id="Broadcast-Receiver的生命周期"><a href="#Broadcast-Receiver的生命周期" class="headerlink" title="Broadcast Receiver的生命周期"></a>Broadcast Receiver的生命周期</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;Broadcast Receiver的生命周期是从被调用开始，再到onReceiver方法执行完成之后结束。onReceiver方法必须在10秒内执行完成，否则Android系统会出现ANR（Application Not Responding）异常。所以不要在onReceiver方法中执行耗时的操作。如果需要在BroadcastReceiver中执行耗时的操作，可以通过Intent启动Service来完成，但不能绑定Service。</p><h3 id="Broadcast的类型"><a href="#Broadcast的类型" class="headerlink" title="Broadcast的类型"></a>Broadcast的类型</h3><ul><li><p>普通广播 (Normal broadcasts)<br>&nbsp;&nbsp;&nbsp;&nbsp;所有监听该广播的广播接收者都可以监听到该广播，并且是没有先后顺序。异步广播使其可以同一时间被所有的接收者接收到。广播的传递效率比较高，不能停止传播。</p></li><li><p>有序广播 (Ordered broadcasts)<br>&nbsp;&nbsp;&nbsp;&nbsp;按照广播接收者的优先级顺序接收广播 , 优先级别在 intent-filter 中的 priority 中声明 ，优先级在-1000 到1000 之间 ，值越大优先级越高 。接收者可以拦截广播，即终止广播的继续传播 。优先级高的广播接收者可以在广播中放入信息，传递给下一个广播接收者。</p></li><li><p>应用内广播（Local Broadcast）<br>&nbsp;&nbsp;&nbsp;&nbsp; 在本应用范围内传播的广播，不会造成隐私数据泄露，不会因为别的应用伪造广播而造成安全隐患。其相比在系统内发送全局广播，更高效。</p></li><li><p>粘性广播（Sticky Broadcast）<br>&nbsp;&nbsp;&nbsp;&nbsp;粘性广播在发送后，其Intent会一直保留到广播事件结束，这种广播也没有所谓的10秒耗时限制。发送粘性广播需要权限android.Manifest.permission.BROADCAST_STICKY。</p></li><li><p>系统广播（System Broadcast）<br>&nbsp;&nbsp;&nbsp;&nbsp;Android系统中内置了多种系统广播，每个广播都有特定的action，常用的系统广播对应的action如下：</p></li></ul><h4 id="常用系统广播表："><a href="#常用系统广播表：" class="headerlink" title="常用系统广播表："></a>常用系统广播表：</h4><center><br><br>| 系统广播        | action|<br>| :————- |:—–|<br>| 设备启动(仅广播一次)    | Intent.ACTION_BOOT_COMPLETED|<br>| 重启设备    |     Intent.ACTION_REBOOT|<br>| 充电时或电量发生变化  |     Intent.ACTION_BATTERY_CHANGED|<br>| 电池电量低  |     Intent.ACTION_BATTERY_LOW|<br>| 电池电量充满    | Intent.ACTION_BATTERY_OKAY|<br>| 屏幕锁屏  |     Intent.ACTION_CLOSE_SYSTEM_DIALOGS|<br>| 屏幕被关闭  |     Intent.ACTION_SCREEN_OFF|<br>| 屏幕被打开  |     Intent.ACTION_SCREEN_ON|<br>| 关闭系统时  |     Intent.ACTION_SHUTDOWN|<br>| 按下照相时的拍照按键(硬件按键)时 |Intent.ACTION_CAMERA_BUTTON|<br>| 监听网络变化    | android.net.conn.CONNECTIVITY_CHANGE|<br>| 关闭或打开飞行模式  | Intent.ACTION_AIRPLANE_MODE_CHANGED|<br>| 设备当前设置被改变时    | Intent.ACTION_CONFIGURATION_CHANGED|<br>| 插入耳机时  |     Intent.ACTION_HEADSET_PLUG|<br>| 未正确移除SD卡但已取出来时(正确移除方法:设置–SD卡和设备内存–卸载SD卡)  |     Intent.ACTION_MEDIA_BAD_REMOVAL|<br>| 插入外部储存装置（如SD卡）  |     Intent.ACTION_MEDIA_CHECKING|<br>| 成功安装APK  |     Intent.ACTION_PACKAGE_ADDED|<br>| 成功卸载APK  |     Intent.ACTION_PACKAGE_REMOVED|<br>|在系统中添加一个快捷方式 |Intent.ADD_SHORTCUT_ACTION |<br>|列举所有可用的应用 | Intent.ALL_APPS_ACTION|<br>|处理拨入的电话 | Intent.ANSWER_ACTION |<br>|拨打电话，被呼叫的联系人在数据中指定 |Intent.CALL_ACTION|<br>|拨打紧急电话号码 |Intent.MERGENCY_DIAL_ACTION|<br>|日期改变 |Intent.DATE_CHANGED_ACTION|<br><br></center><h3 id="BroadcastReceiver的创建"><a href="#BroadcastReceiver的创建" class="headerlink" title="BroadcastReceiver的创建"></a>BroadcastReceiver的创建</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在我们要创建自己的BroadcastReceiver时，需要继承android.content.BroadcastReceiver，并实现其onReceive方法。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.receiver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.BroadcastReceiver;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;  </span><br><span class="line"><span class="keyword">import</span> android.util.Log; </span><br><span class="line"><span class="keyword">import</span> android.content.Context;  </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">MyReceiver</span><span class="params">()</span> extends BroadcastReceiver</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span></span>&#123;</span><br><span class="line"><span class="comment">//获取广播中携带的数据，有多种数据类型</span></span><br><span class="line">String msg = intent.getStringExtra(<span class="string">"key"</span>); </span><br><span class="line">Log.d(<span class="string">"MyReceiver:"</span>, <span class="string">"MyReceiver"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="BroadcastReceiver的注册"><a href="#BroadcastReceiver的注册" class="headerlink" title="BroadcastReceiver的注册"></a>BroadcastReceiver的注册</h3><p>BroadcastReceiver在创建后也需要先注册才能使用。在Android 的广播机制中,动态注册的BroadcastReceiver优先级是要高于静态注册。</p><h4 id="①静态注册"><a href="#①静态注册" class="headerlink" title="①静态注册"></a>①静态注册</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;静态注册需要在AndroidManifest.xml文件中配置，代码如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span> <span class="attr">android:name</span>=<span class="string">"com.example.receiver.MyReceiver"</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line">             <span class="tag">&lt;<span class="name">action</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"android.intent.action.MY_BROADCAST"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:priority</span>=<span class="string">"999"</span> /&gt;</span> <span class="comment">&lt;!-- 设置最高优先级 --&gt;</span> </span><br><span class="line">             <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span>  </span><br><span class="line">       <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="②动态注册"><a href="#②动态注册" class="headerlink" title="②动态注册"></a>②动态注册</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;动态注册的属于常驻型，这个广播接收者会在程序运行的整个过程中一直存在，不会被注销掉，当程序被退出后不会再接收到该广播。动态注册需要在代码中设置IntentFilter和注册BroadcastReceiver，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MyReceiver myReceiver = <span class="keyword">new</span> MyReceiver();           </span><br><span class="line"><span class="comment">//创建IntentFilter </span></span><br><span class="line">IntentFilter intentFilter = <span class="keyword">new</span> IntentFilter();  </span><br><span class="line">intentFilter .addAction(<span class="string">"android.intent.action.MY_BROADCAST"</span>);  </span><br><span class="line"><span class="comment">//注册</span></span><br><span class="line">registerReceiver(myReceiver, intentFilter);</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;动态注册的BroadcastReceiver跟随注册它组件相关联，所以在组件销毁时需要解除注册，否则系统会抛出一个异常。解除注册代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unregisterReceiver(myReceiver );</span><br></pre></td></tr></table></figure></p><h3 id="发送Broadcast"><a href="#发送Broadcast" class="headerlink" title="发送Broadcast"></a>发送Broadcast</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;广播接收器介绍完呢，那怎么发送广播呢，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();  </span><br><span class="line">intent.setAction(<span class="string">"android.intent.action.MY_BROADCAST"</span>);</span><br><span class="line"><span class="comment">//在广播中放入数据，有多种参数类型的函数供使用</span></span><br><span class="line">intent.putExtra(<span class="string">"key"</span>, <span class="string">"value"</span>);</span><br><span class="line"><span class="comment">//发送普通广播</span></span><br><span class="line">sendBroadcast(intent);</span><br><span class="line"><span class="comment">//发送有序广播  </span></span><br><span class="line"><span class="comment">//receiverPermission为权限参数，如果为null则表示不要求接收者声明指定的权限，如果不为null，则表示接收者若要接收此广播，需声明指定权限。</span></span><br><span class="line">sendOrderedBroadcast(intent,receiverPermission);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android之Service</title>
      <link href="/2016/06/25/android-service/"/>
      <url>/2016/06/25/android-service/</url>
      
        <content type="html"><![CDATA[<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;服务（Service）是Android四大组件之一，其在后台执行长时间运行的操作，不提供用户界面。当启动一个服务，它将一直在后台运行，即使用户切换<br><a id="more"></a><br>到另一个应用程序。一个组件可以绑定到一个服务与它交互，甚至执行进程间通信(IPC)。默认情况下，服务是运行在启动它的应用程序的主线程中的。</p><h3 id="Service的生命周期"><a href="#Service的生命周期" class="headerlink" title="Service的生命周期"></a>Service的生命周期</h3><ul><li>onCreate()：当Service第一次创建时回调onCreate()。该方法只被回调一次。</li><li>onStartCommand()：当其他组件调用startService()方法请求启动Service时回调onStartCommand()。Service启动后会一直在后台运行，即使用户切换到另一个应用程序或者启动它的组件被销毁了。当Service任务执行完以后，需自行调用stopSelf() 或 其他组件调用stopService()方法停止Service。</li><li>onBind()：当其他组件调用bindService()方法请求绑定Service时回调onBind()。该方法返回一个IBinder接口，IBinder接口是Service与绑定的组件进行交互的桥梁。若Service未绑定其他组件，则该方法应返回null。</li><li>onDestroy()：当Service被销毁时回调onDestroy()，在该方法中做一些释放资源的操作。<br>官方给出的Service的生命周期流程图如下：<center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-service.png" alt="这里写图片描述"><br></center></li></ul><h3 id="Service的基本类型"><a href="#Service的基本类型" class="headerlink" title="Service的基本类型"></a>Service的基本类型</h3><ul><li>Started<br>&nbsp;&nbsp;&nbsp;&nbsp;当应用以startService()方法被启动时，服务就会开始在后台无限期的运行。通常一个启动的服务执行一个单一的操作而且不会返回结果给调用者。当这个动作执行完成的时候，服务应该停止。</li><li>Bound<br>&nbsp;&nbsp;&nbsp;&nbsp;当应用以bindService()方法被启动时，服务就会被绑定。一个绑定的服务会提供一个客户端服务器接口，允许组件与服务进行交互，执行进程间通信(IPC)。绑定服务的生存期和被绑定的应用程序组件一致。</li></ul><h3 id="Service应用类型"><a href="#Service应用类型" class="headerlink" title="Service应用类型"></a>Service应用类型</h3><ul><li>Local Service：<br>&nbsp;&nbsp;&nbsp;&nbsp;依附在主进程上的服务。</li><li>Remote Service：<br>&nbsp;&nbsp;&nbsp;&nbsp;在一个独立进程上的服务。</li><li>前台Service：<br>&nbsp;&nbsp;&nbsp;&nbsp;会在通知栏显示Notification。</li><li>后台Service：<br>&nbsp;&nbsp;&nbsp;&nbsp;默认的服务。</li><li>startService启动的Service：<br>&nbsp;&nbsp;&nbsp;&nbsp;以startService()方法被启动的服务。</li><li>bindService启动的Service：<br>&nbsp;&nbsp;&nbsp;&nbsp;以bindService()方法绑定的服务。</li><li>以startService启动后又使用bindService 绑定的Service：<br>&nbsp;&nbsp;&nbsp;&nbsp;该Service将会一直在后台运行，onCreate方法只会调用一次，onStartCommand的调用次数与startService调用的次数一致。只调用unBindService不会停止Service，必须再调用stopService或stopSelf来停止服务。</li></ul><h3 id="Service的创建"><a href="#Service的创建" class="headerlink" title="Service的创建"></a>Service的创建</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;创建一个服务需要新建一个Service的子类或一个已有Service子类的子类。再根据需求重写一些回调方法，用于对服务生命周期中的关键节点进行处理，以及向组件提供绑定机制。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.Binder;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> MyBinder mBinder = <span class="keyword">new</span> MyBinder();</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate();</span><br><span class="line">  <span class="comment">// 前台Service</span></span><br><span class="line">  <span class="comment">// MyNotification myNotification = new MyNotification(this);</span></span><br><span class="line">  <span class="comment">// startForeground(12345,myNotification.getNotification());</span></span><br><span class="line">  <span class="comment">//关闭前台Service</span></span><br><span class="line">  <span class="comment">//stopForeground(boolean removeNotification)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">return</span> START_STICKY;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="comment">//以start方式启动返回null，以bound方式启动返回mBinder </span></span><br><span class="line">      <span class="comment">//return mBinder;</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onUnbind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">super</span>.onUnbind(intent);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">super</span>.onDestroy();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> MyService <span class="title">getService</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> MyService.<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">            Log.i(<span class="string">"MyService"</span>,<span class="string">"work"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="onStartCommand-方法的返回值该返回值描述了当系统kill掉该Service之后系统应该如何继续使用该Service。"><a href="#onStartCommand-方法的返回值该返回值描述了当系统kill掉该Service之后系统应该如何继续使用该Service。" class="headerlink" title="onStartCommand()方法的返回值该返回值描述了当系统kill掉该Service之后系统应该如何继续使用该Service。"></a>onStartCommand()方法的返回值该返回值描述了当系统kill掉该Service之后系统应该如何继续使用该Service。</h4><ul><li><p>START_NOT_STICKY：如果在返回过onStartCommand()方法之后系统杀死了该Service，则该Service不会再被系统重建，除非有后续的intents。</p></li><li><p>START_STICKY：如果在返回过onStartCommand()方法之后系统杀死了该Service（此时记录该Service为started 状态），则之后系统会尝试重新创建该Service并创建之后一定调用onStartCommand()方法,但是不会传递最后一个Intent对象，而是用值为null的Intent对象，除非有后续的intents。</p></li><li><p>START_REDELIVER_INTENT：如果在返回过onStartCommand()方法之后系统杀死了该Service，则之后系统会重新创建该Service并调用onStartCommand()方法,且该Intent值为最后一次Intent对象。</p></li></ul><h3 id="Service的注册"><a href="#Service的注册" class="headerlink" title="Service的注册"></a>Service的注册</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">"com.example.MyService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Service被started"><a href="#Service被started" class="headerlink" title="Service被started"></a>Service被started</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);</span><br><span class="line">startService(intent);</span><br></pre></td></tr></table></figure><h3 id="Service被bound"><a href="#Service被bound" class="headerlink" title="Service被bound"></a>Service被bound</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, MyService.class);</span><br><span class="line">bindService(intent, serviceConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line"></span><br><span class="line">ServiceConnection serviceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">MyService.MyBinder binder = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">//绑定成功时回调      　　　　</span></span><br><span class="line">　　<span class="meta">@Override</span></span><br><span class="line">　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span></span>&#123;</span><br><span class="line">           binder =(MyService.MyBinder)service;</span><br><span class="line">           binder.work();</span><br><span class="line">　　&#125;</span><br><span class="line">　　<span class="comment">//绑定失败时回调</span></span><br><span class="line">　　<span class="meta">@Override</span></span><br><span class="line">　　　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">　　　　　binder = <span class="keyword">null</span>;</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="stopService-Intent-intent"><a href="#stopService-Intent-intent" class="headerlink" title="stopService(Intent intent)"></a>stopService(Intent intent)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stopService(intent);</span><br></pre></td></tr></table></figure><ul><li>以start方式启动的Service，执行stopService后，Service回调onDestroy()方法被销毁。</li><li>以bound方式启动的Service，执行stopService后，Service不回调且不会被销毁。</li><li>以start方式启动的,然后在bind的Service，执行stopService后，Service不回调且不会被销毁。如果再执行unbindService方法，则Service先回调onUnbind，然后回调onDestroy()方法被销毁。</li></ul><h3 id="unbindService-ServiceConnection-conn"><a href="#unbindService-ServiceConnection-conn" class="headerlink" title="unbindService(ServiceConnection conn)"></a>unbindService(ServiceConnection conn)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unbindService(serviceConnection);</span><br></pre></td></tr></table></figure><ul><li>以bound方式启动的Service，执行unbindService后，Service先回调onUnbind，然后回调onDestroy()方法被销毁。</li><li>以start方式启动的,然后再bind的Service，执行unbindService后，Service不回调且不会被销毁。如果再执行stopService方法，则Service先回调onUnbind，然后回调onDestroy()方法被销毁。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android之Activity</title>
      <link href="/2016/06/20/android-activity/"/>
      <url>/2016/06/20/android-activity/</url>
      
        <content type="html"><![CDATA[<h2 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Activity是Android四大组件之一，用于与用户进行交互，每个Activity对应一个界面窗口。我们使用的Android手机软件应用中的界面就是Activity。一<br><a id="more"></a>个软件有多个界面，也就是有多个Activity,界面可以是全屏的、非全屏的，也可以是悬浮的，而且一个界面可以跳转到另一个界面，也可以将信息传到另一个界面。</p><h2 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;当我们打开一个界面，就是这个Activity的生命周期的开始。当我们跳转到不同的界面，再到退出应用程序，这期间Activity的状态就一直在变化。</p><h3 id="Activity类中控制生命周期的函数如下"><a href="#Activity类中控制生命周期的函数如下" class="headerlink" title="Activity类中控制生命周期的函数如下"></a>Activity类中控制生命周期的函数如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Activity</span> <span class="keyword">extends</span> <span class="title">ApplicationContext</span> </span>&#123;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRestart</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onFreeze</span><span class="params">(Bundle outIcicle)</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPause</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onStop</span><span class="params">()</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看看官网提供的一张描述Activity生命周期的流程图如下:</p><p><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-activity.png" alt="这里写图片描述"><br></center></p><h4 id="这些函数中有的在我们实际开发的过程中需要被重写，我们来逐一了解一下它们。"><a href="#这些函数中有的在我们实际开发的过程中需要被重写，我们来逐一了解一下它们。" class="headerlink" title="这些函数中有的在我们实际开发的过程中需要被重写，我们来逐一了解一下它们。"></a>这些函数中有的在我们实际开发的过程中需要被重写，我们来逐一了解一下它们。</h4><ul><li><p>onCreate(Bundle savedInstanceState)： 在Activity被创建时调用，在这个方法里一般会做一些初始化操作，比如加载界面布局资源、初始化数据等等。Bundle 的数据类型是键值对。</p></li><li><p>onStart()：在Activity被启动时调用。这时的Activity已经可见了，但是没有在前台，所以无法和用户交互。</p></li><li><p>onResume()：在Activity将要与用户交互时调用。这时的Activity出现在前台并且和用户交互。</p></li><li><p>onPause()：在Activity被暂停时调用。这时的Activity失去焦点，不在最上层，但是依然可见。这时可以进行持久化用户数据、停止动画，暂停多媒体等不太耗时的操作；释放部分占用的系统资源。因为打开新的Activity时会去回调上一个Activity的onPause方法，也就是新Activity的onResume()方法只能在旧Activity的onPause()方法执行完后才会执行。因此onPause方法中不能做太耗时的操作，耗时的清理工作应该放在onStop方法中。</p></li><li><p>onStop()：在Activity被停止时调用。这时的Activity被其他Activity完全遮挡，对用户不可见。耗时的清理工作应该放在onStop方法中，Activity 此时仍然存在于内存中，如果在系统内存不足时，系统会直接销毁该Activity。因为这个状态的Activity优先级最低。</p></li><li><p>onRestart()：在原Activity没有销毁时从停止状态重新启动时调用。比如我们在打开一个Activity后，又打开一个新的Activity或者切换到桌面，第一个Activity就会暂停（执行了onPause和onStop），而当我们再回到第一个Activity时，它的onRestart方法就会被调用。</p></li><li><p>onDestroy()：在Activity即将被销毁时调用。这是Activity生命周期的最后一个环节，进行回收工作和资源的释放。但是一般情况下，在onPause()和onStop()中大多数的清理工作都已经完成。</p></li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;Activity的的状态变化也可以像下图这样表示，当一个Activity想要与用户交互时，它的方法就会朝上执行，当它要被销毁时，就会向下执行方法。</p><p><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-activity-heap.png" alt="这里写图片描述"><br></center></p><h3 id="异常情况下Activity的生命周期以后再做学习和介绍。"><a href="#异常情况下Activity的生命周期以后再做学习和介绍。" class="headerlink" title="异常情况下Activity的生命周期以后再做学习和介绍。"></a>异常情况下Activity的生命周期以后再做学习和介绍。</h3><h2 id="Activity栈式管理"><a href="#Activity栈式管理" class="headerlink" title="Activity栈式管理"></a>Activity栈式管理</h2><h2 id="Activity任务"><a href="#Activity任务" class="headerlink" title="Activity任务"></a>Activity任务</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Activity的任务（Task）是执行特定作业时与用户交互的一系列 Activity的有序集合，并有一个TaskId。</p><h2 id="Activity栈"><a href="#Activity栈" class="headerlink" title="Activity栈"></a>Activity栈</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;Activity采用栈式管理.一个应用有一个“先进后出”的任务栈（task stack）也叫回退栈（back stack）,用来记录存放用户开启的activity的。<br>&nbsp;&nbsp;&nbsp;&nbsp;当我们启动一个Activity，系统就会创建一个栈并把这个Activity压进栈并获得焦点。如果当前 Activity 启动了另一个 Activity，则新的 Activity 将被压入栈顶并获得焦点。 前一个 Activity 仍然在栈中，但是处于停止状态，系统会保存这个Activity的当前状态。当用户按下返回键时，当前 Activity 将从栈顶弹出被销毁，前一个 Activity 将位于栈顶。 Activity 在栈中的顺序永远不会改变，当栈中没有Activity时，系统会回收这个任务栈。</p><p><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-activity-stack.png" alt="这里写图片描述"><br></center></p><h2 id="Activity的启动模式"><a href="#Activity的启动模式" class="headerlink" title="Activity的启动模式"></a>Activity的启动模式</h2><p>在默认情况下，当我们多次启动同一个Activity时，系统会在每次都创建一个实例。但在有些时候，我们往往不希望这样做。所以Activity提供了四种启动模式，我们可以灵活应用。</p><h3 id="启动模式"><a href="#启动模式" class="headerlink" title="启动模式"></a>启动模式</h3><ul><li>standard<br>&nbsp;&nbsp;&nbsp;&nbsp;标准模式，也是系统默认模式。每次启动一个Activity时，系统都会创建一个实例，且不管这个实例是否已经存在。一个任务栈中可以有多个实例，每个实例可以属于不同的任务栈。谁启动了这个Activity,这个Activity实例就会进入启动它的那个Activity所在的栈中。</li><li>singleTop：<br>&nbsp;&nbsp;&nbsp;&nbsp;栈顶复用模式。如果要被创建的Activity已经存在于栈顶，那么这个Activity就不会被重复创建，这个Activity的onCreate、onStart方法不会被调用，因为它没有发生改变。而如果要被创建的Activity已经存在但是不在栈顶，那么它仍然会被创建一个实例。</li><li>singleTask：<br>&nbsp;&nbsp;&nbsp;&nbsp;栈内复用模式，这是一种单实例模式。只要Activity在一个栈中存在，那么不论启动多少次这个Activity都不会被重新创建实例。如果这个Activity在栈顶就会直接启动，如果不在栈顶，就会将栈内所有在它上面的Activity全部出栈，这时它就会位于栈顶。</li><li>singleInstance：<br>&nbsp;&nbsp;&nbsp;&nbsp;单实例模式，这种模式除了拥有singTask的所有特性外，还加了一条特性：这种模式下的Activity只能单独地存在于一个任务栈中。在这种模式的Activity被启动，系统便会为它创建一个新的任务栈，并且任务栈里面只有它一个实例存在，该栈中的这个Activity实例可以被多个应用共享。</li></ul><h3 id="怎么给Activity制定启动模式"><a href="#怎么给Activity制定启动模式" class="headerlink" title="怎么给Activity制定启动模式"></a>怎么给Activity制定启动模式</h3><p>1、在AndroidManifest.xml程序清单中指定launchMode。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"com.example.MainActivity"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:launchMode</span>=<span class="string">"singleTop"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>2、在Intent中设置flags标志位来指定，这种方式的优先级高于上一种。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent  intent =<span class="keyword">new</span> Intent();</span><br><span class="line">intent.setClass(MainActivity.<span class="keyword">this</span>, MainActivity2.class);</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><h4 id="常用的flags标志位："><a href="#常用的flags标志位：" class="headerlink" title="常用的flags标志位："></a>常用的flags标志位：</h4><ul><li>FLAG_ACTIVITY_CLEAR_TOP：</li><li>FLAG_ACTIVITY_NEW_TASK：</li><li>FLAG_ACTIVITY_NO_HISTORY：</li><li>FLAG_ACTIVITY_SINGLE_TOP：</li></ul><h2 id="应用Activity"><a href="#应用Activity" class="headerlink" title="应用Activity"></a>应用Activity</h2><h3 id="Activity的创建"><a href="#Activity的创建" class="headerlink" title="Activity的创建"></a>Activity的创建</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;创建Activity需要继承android提供的activity类。这里继承最简单的android.app.Activity。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        <span class="comment">// 设置视图，R.layout.activity_my为activity_my.xml视图文件的资源ID</span></span><br><span class="line">        setContentView(R.layout.activity_my);</span><br><span class="line">        </span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>xml视图请参考<a href="#">Android布局</a></p><h3 id="Activity的注册"><a href="#Activity的注册" class="headerlink" title="Activity的注册"></a>Activity的注册</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;当我们在应用中新建了一个Activity，不要忘了在AndroidManifest.xml清单文件中注册。在Android四大组件中Activity、Service、BroadcastReceiver都是需要注册才会生效的。<br>Activity在AndroidManifest.xml清单文件中注册的方法如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">"com.example.MyActivity"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 根据需要，设置其他属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;对于打开应用后需要默认启动的Activity，需要加入Intent-Filter，如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:name</span>=<span class="string">"com.example.MyActivity"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据需要，设置其他属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使应用程序最先启动这个组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使应用程序显示在程序列表里 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Activity的Intent跳转"><a href="#Activity的Intent跳转" class="headerlink" title="Activity的Intent跳转"></a>Activity的Intent跳转</h3><h4 id="①显式Intent"><a href="#①显式Intent" class="headerlink" title="①显式Intent"></a>①显式Intent</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;显式Intent，是在构造Intent对象时就指定接收者，这种方式用在知道目标Activity名称的时候，一般是在一个应用程序内部实现的，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent  intent =<span class="keyword">new</span> Intent();</span><br><span class="line"><span class="comment">/*从Activity_1中跳转到Activity_2*/</span></span><br><span class="line">intent.setClass(Activity_1.<span class="keyword">this</span>, Activity_2.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><h4 id="②隐式Intent"><a href="#②隐式Intent" class="headerlink" title="②隐式Intent"></a>②隐式Intent</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;隐式Intent，是在构造Intent对象时并不知道也不关心接收者是谁，这种方式用在没有明确指出目标Activity的时候，一般是用于在不同应用程序之间。没有明确指出目标，因为它只给出了过滤条件：action、category、data：（scheme、host、path、type、mimeType）。优先级：action-&gt;data-&gt;category。<br>在AndroidManifest.xml清单文件中为Activity设置Intent-Filter如下：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"..."</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"..."</span>/&gt;</span>       </span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">"..."</span> <span class="attr">android:host</span>=<span class="string">"..."</span> <span class="attr">android:path</span>=<span class="string">"/..."</span> <span class="attr">android:type</span>=<span class="string">"..."</span>/&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在跳转时设置匹配条件如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"><span class="comment">/*设置Action匹配条件*/</span></span><br><span class="line">intent.setAction(<span class="string">"..."</span>);</span><br><span class="line"><span class="comment">/*设置Category匹配条件*/</span></span><br><span class="line">intent.addCategory(<span class="string">"..."</span>);</span><br><span class="line"><span class="comment">/*设置data的scheme、host、path匹配条件*/</span></span><br><span class="line">intent.setData(Uri.parse(<span class="string">"..."</span>));</span><br><span class="line"><span class="comment">/*设置data的scheme、host、path、type匹配条件*/</span></span><br><span class="line">intent.setDataAndType(Uri.parse(<span class="string">"..."</span>),String type);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><h3 id="Activity的信息传递"><a href="#Activity的信息传递" class="headerlink" title="Activity的信息传递"></a>Activity的信息传递</h3><p>这里暂且先只介绍一种</p><h4 id="①利用Bundle来传递"><a href="#①利用Bundle来传递" class="headerlink" title="①利用Bundle来传递"></a>①利用Bundle来传递</h4><p>&nbsp;&nbsp;&nbsp;&nbsp;通过Bundle来传递不同Activity之间的数据。Bundle对象针对不同的数据类型都提供了方法,它保存的数据是以key-value(键值对)的形式存在的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putString(String key, String value);</span><br><span class="line">bundle.putDouble(String key, <span class="keyword">double</span> value);</span><br><span class="line">intent.putExtras(bundle);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure></p><p>&nbsp;&nbsp;&nbsp;&nbsp;在接受数据的Activity中同样是以Bundle的方式解开封装的数据，用getIntent().getExtras() 方法取得随着Bundle对象传递过来的数据。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bundle bundle = <span class="keyword">this</span>.getIntent().getExtras();</span><br><span class="line">String str = bundle.getString(String key);</span><br><span class="line"><span class="keyword">double</span> dou = bundle.getDouble(String key);</span><br></pre></td></tr></table></figure></p><p>Bundle基本类型API表<br> <center><br> <img src="http://oznpemywy.bkt.clouddn.com/image/blog/android-bundle-api.png" alt="这里写图片描述"><br> </center></p><h4 id="②Bitmap"><a href="#②Bitmap" class="headerlink" title="②Bitmap"></a>②Bitmap</h4><h4 id="③其他"><a href="#③其他" class="headerlink" title="③其他"></a>③其他</h4><h3 id="Activity的属性"><a href="#Activity的属性" class="headerlink" title="Activity的属性"></a>Activity的属性</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">android:allowTaskReparenting = ["true" | "false"]</span><br><span class="line"></span><br><span class="line">android:alwaysRetainTaskState = ["true" | "false"]  </span><br><span class="line"></span><br><span class="line">android:clearTaskOnLaunch = ["true" | "false"]</span><br><span class="line"></span><br><span class="line">android:configChanges = ["mcc"|"mnc"|"locale" |"touchscreen"| "keyboard"| "keyboardHidden"| "navigation"|"orientation" |"fontScale"]</span><br><span class="line"></span><br><span class="line">android:enabled=["true" | "false"]  </span><br><span class="line"></span><br><span class="line">android:excludeFromRecents=["true" | "false"] </span><br><span class="line"></span><br><span class="line">android:exported=["true" | "false"]</span><br><span class="line"></span><br><span class="line">android:finishOnTaskLaunch=["true" | "false"]</span><br><span class="line"></span><br><span class="line">android:icon="drawable resource"   </span><br><span class="line"></span><br><span class="line">android:label="string resource"</span><br><span class="line"></span><br><span class="line">android:launchMode=["multiple" | "singleTop" |"singleTask" | "singleInstance"]</span><br><span class="line"></span><br><span class="line">android:multiprocess=["true" | "false"]   </span><br><span class="line"></span><br><span class="line">android:name="string"   </span><br><span class="line"></span><br><span class="line">android:noHistory=["true" | "false"] </span><br><span class="line"></span><br><span class="line">android:permission="string" </span><br><span class="line">  </span><br><span class="line">android:process="string"</span><br><span class="line"></span><br><span class="line">android:screenOrientation=["unspecified" | "user" | "behind" |"landscape" | "portrait" | "sensor" | "nonsensor"]   </span><br><span class="line"></span><br><span class="line">android:stateNotNeeded=["true" | "false"]</span><br><span class="line"></span><br><span class="line">android:taskAffinity="string"</span><br><span class="line"></span><br><span class="line">android:theme="resource or theme"</span><br><span class="line"></span><br><span class="line">android:windowSoftInputMode=[one or more of:"stateUnspecified""stateUnchanged""stateHidden""stateAlwaysHidden""stateVisible""stateAlwaysVisible""adjustUnspecified""adjustResize" "adjustPan"]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="/2016/06/14/jdbc/"/>
      <url>/2016/06/14/jdbc/</url>
      
        <content type="html"><![CDATA[<blockquote><p>JDBC（Java DataBase Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序。<br><a id="more"></a></p></blockquote><h4 id="JDBC步骤："><a href="#JDBC步骤：" class="headerlink" title="JDBC步骤："></a>JDBC步骤：</h4><ol><li>加载JDBC驱动</li><li>获取数据库连接</li><li>创建一个Statement实例</li><li>执行SQL语句并获得查询结果</li><li>释放相关资源</li></ol><h5 id="Statement实例有三种类型："><a href="#Statement实例有三种类型：" class="headerlink" title="Statement实例有三种类型："></a>Statement实例有三种类型：</h5><ul><li>Statement，执行静态SQL语句   </li><li>子接口PreparedStatement，执行动态SQL语句，参数化，预编译</li><li>子接口CallableStatement，执行数据库存储过程</li></ul><h5 id="Statement接口提供了多个执行SQL语句的方法："><a href="#Statement接口提供了多个执行SQL语句的方法：" class="headerlink" title="Statement接口提供了多个执行SQL语句的方法："></a>Statement接口提供了多个执行SQL语句的方法：</h5><ul><li>boolean execute()：执行SQL语句，该语句可以是任何种类的SQL语句。</li><li>ResultSet executeQuery()：执行SQL查询，并返回该查询生成的ResultSet对象。</li><li>int executeUpdate()：执行SQL语句，该语句可能为 INSERT、UPDATE、DELETE 语句，或者不返回任何内容的SQL语句（如 SQL DDL 语句）。</li></ul><h4 id="MySql-JDBC实现如下："><a href="#MySql-JDBC实现如下：" class="headerlink" title="MySql JDBC实现如下："></a>MySql JDBC实现如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">String dbDriver = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">String url = <span class="string">"jdbc:mysql://localhost:3306/dbname"</span>;  </span><br><span class="line">String username = <span class="string">"admin"</span>;   </span><br><span class="line">String password = <span class="string">"admin"</span>;</span><br><span class="line">String sql = <span class="string">"select * from user where user_name = ? "</span>;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;  </span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;  </span><br><span class="line">PreparedStatement stmt = <span class="keyword">null</span>;  </span><br><span class="line">List&lt;Map&lt;String,Object&gt;&gt; resultList = <span class="keyword">new</span> ArrayList&lt;Map&lt;String,Object&gt;&gt;();  </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    <span class="comment">// 加载JDBC驱动  </span></span><br><span class="line">    Class.forName(dbDriver);  </span><br><span class="line">    <span class="comment">// 获取数据库连接  </span></span><br><span class="line">    conn = DriverManager.getConnection(url, username, password);     </span><br><span class="line">    <span class="comment">// 创建Statement对象  </span></span><br><span class="line">    stmt = conn.prepareStatement(sql);  </span><br><span class="line">    <span class="comment">// 设置传入参数依次到sql语句中的占位符，位置从1开始</span></span><br><span class="line">    stmt.setString(<span class="number">1</span>, <span class="string">"wang"</span>);  </span><br><span class="line">    <span class="comment">// 执行SQL语句  </span></span><br><span class="line">    rs = stmt.executeQuery();  </span><br><span class="line">    <span class="comment">// 处理结果集  </span></span><br><span class="line">    ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line">    <span class="comment">// 获取列数</span></span><br><span class="line">    <span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line">    <span class="keyword">while</span>(rs.next())&#123;  </span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++)&#123;  </span><br><span class="line">            <span class="comment">// 获取列名</span></span><br><span class="line">            String columnName = rsmd.getColumnName(i+<span class="number">1</span>);  </span><br><span class="line">            map.put(columnName, rs.getString(columnName));  </span><br><span class="line">        &#125;  </span><br><span class="line">        resultList.add(map);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">    e.printStackTrace();  </span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">    <span class="comment">// 释放相关资源</span></span><br><span class="line">    <span class="keyword">try</span> &#123;   </span><br><span class="line">         <span class="comment">// 按创建的相反顺序关闭</span></span><br><span class="line">         rs.close();  </span><br><span class="line">         stmt.close();  </span><br><span class="line">         conn.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;  </span><br><span class="line">        e.printStackTrace();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet请求转发与重定向</title>
      <link href="/2016/03/22/web-servlet-forword-redirect/"/>
      <url>/2016/03/22/web-servlet-forword-redirect/</url>
      
        <content type="html"><![CDATA[<h3 id="请求转发"><a href="#请求转发" class="headerlink" title="请求转发"></a>请求转发</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.getRequestDispacther(<span class="string">"/hello.jsp"</span>).forword(request,response);</span><br></pre></td></tr></table></figure><a id="more"></a><p>&nbsp;&nbsp;&nbsp;&nbsp;getRequestDispacther()方法把请求转发给jsp或其它servlet，整个过程都是在服务器端的同一个请求里面完成的，servlet和jsp或其它servlet共用同一个request以及request中设置的属性参数。整个过程是一个请求，一个响应。</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.sendRedirect(<span class="string">"hello.jsp"</span>);</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;sendRedirect()方法向客户端返回响应，告诉客户端再向服务器发送一个请求，去访问指定的jsp或servlet，在客户端接收到这个响应后，立刻发出一个新的请求。两个请求不共享request以及request中设置的属性参数。整个过程是两个请求，两个响应。</p>]]></content>
      
      
      <categories>
          
          <category> Web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MD5加密算法</title>
      <link href="/2015/12/14/algorithm-md5/"/>
      <url>/2015/12/14/algorithm-md5/</url>
      
        <content type="html"><![CDATA[<h2 id="MD5加密算法"><a href="#MD5加密算法" class="headerlink" title="MD5加密算法"></a>MD5加密算法</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;MD5常应用于数据加密和信息校验，MD5将文件及文本都当做一个文本信息，通过不可逆的字符串变换算法转换后，产生了一个唯一的MD5信息摘要字符串<br><a id="more"></a>。这个信息摘要相当于这个文本信息或文件的一个唯一的信息识别，当文本信息或文件被更改后，其通过MD5算法计算后产生的信息摘要字符串也会改变。</p><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;对密码等重要信息进行MD5加密后，将产生的信息摘要存入数据库。这样即使是管理员也不能看到真实的密码，保障了安全性。在密码验证时，再将密码进行MD5加密后得到的串与数据库中的进行匹配即可。</p><h3 id="校验"><a href="#校验" class="headerlink" title="校验"></a>校验</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;一个文件进行MD5加密后，只会产生了一个唯一的MD5信息摘要字符串。当文件损坏或者被篡改后，再得到的信息摘要就会改变。</p><h3 id="密码加密MD5算法"><a href="#密码加密MD5算法" class="headerlink" title="密码加密MD5算法"></a>密码加密MD5算法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">md5</span><span class="params">(String plainText)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            md.update(plainText.getBytes());</span><br><span class="line">            <span class="keyword">byte</span> b[] = md.digest();</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">            StringBuffer buf = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> offset = <span class="number">0</span>; offset &lt; b.length; offset++) &#123;</span><br><span class="line">                i = b[offset];</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">                    i += <span class="number">256</span>;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; <span class="number">16</span>)</span><br><span class="line">                    buf.append(<span class="string">"0"</span>);</span><br><span class="line">                buf.append(Integer.toHexString(i));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> buf.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">            <span class="comment">//</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> md5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python简单爬虫-1</title>
      <link href="/2015/10/14/python-simpleSpider-1/"/>
      <url>/2015/10/14/python-simpleSpider-1/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;网络爬虫早已不是什么新鲜事物了，我们也经常会用到它去爬取需要的信息。这里介绍一个python3的简单爬虫，主要用urllib库的request去访问网络<a id="more"></a><br>、bs4库的BeautifulSoup去过滤信息。</p><h3 id="1-观察目标网页"><a href="#1-观察目标网页" class="headerlink" title="1.观察目标网页"></a>1.观察目标网页</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;如果我们需要爬取一个网页中的文字、图片、链接等信息，就需要先去在网页源码中找到需要信息所在的标签。因为我们的爬取过程是先获取整个网页HTML，然后过滤出目标标签，再从标签中提取信息，所以需要先知道目标信息所在的标签。<br>&nbsp;&nbsp;&nbsp;&nbsp;假如我们要获取豆瓣电影的电影信息，首先在浏览器中查看网页源码，一般按<strong>快捷键F12</strong>就可以查看。</p><h3 id="2-获取网页内容"><a href="#2-获取网页内容" class="headerlink" title="2.获取网页内容"></a>2.获取网页内容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;使用request访问网页获取HTML内容，为了防止被网站屏蔽，可以通过设置消息头简单模拟成浏览器的访问。<br>浏览器在访问时设置的请求头如下：</p><p><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/jpg/py_sp.jpg" alt="这里写图片描述"><br></center><br>获取网页代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen, Request</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError, URLError</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span><span class="params">(url)</span>:</span></span><br><span class="line">    headers = &#123;  </span><br><span class="line">                    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko)Chrome/48.0.2564.116 Safari/537.36'</span>，</span><br><span class="line">                    <span class="string">'Accept'</span>:<span class="string">'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8'</span>,</span><br><span class="line">                    <span class="string">'Accept-Language'</span>:<span class="string">'zh-CN,zh;q=0.8'</span>,</span><br><span class="line">                    <span class="string">'Connection'</span>:<span class="string">'keep-alive'</span>,</span><br><span class="line">                    <span class="string">'Host'</span>:<span class="string">'movie.douban.com'</span>,</span><br><span class="line">                    <span class="string">'Upgrade-Insecure-Requests'</span>:<span class="string">'1'</span>,</span><br><span class="line">                    <span class="string">'Referer'</span>:<span class="string">'https://movie.douban.com'</span></span><br><span class="line">                &#125;</span><br><span class="line">    <span class="comment"># 设置headers</span></span><br><span class="line">    req = Request(url, headers = my_headers)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#发送请求</span></span><br><span class="line">        response = urlopen(req)</span><br><span class="line"><span class="comment">#读取返回结果</span></span><br><span class="line">        content = response.read()</span><br><span class="line">        response.close() </span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line"><span class="comment">#服务器返回错误，具体可看e.code代码</span></span><br><span class="line">        print(<span class="string">"HTTPError:"</span>, url, e.code)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">except</span> URLError <span class="keyword">as</span> e:</span><br><span class="line"><span class="comment">#找不到URL指定主机或无法联网</span></span><br><span class="line">        print(<span class="string">"UrlErrorurl:"</span>, url, e.reason)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> content</span><br></pre></td></tr></table></figure><h3 id="3-过滤目标内容标签"><a href="#3-过滤目标内容标签" class="headerlink" title="3.过滤目标内容标签"></a>3.过滤目标内容标签</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在第一步我们获取到了整个网页的信息，但我们只需要一部分，bs4库的BeautifulSoup可以帮助我们找出目标内容所在的标签。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getMovies</span><span class="params">(url)</span>:</span></span><br><span class="line">html = getHtml(url)</span><br><span class="line"><span class="keyword">if</span>(html != <span class="keyword">None</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line"><span class="comment">#创建beautifulsoup对象</span></span><br><span class="line">        bsObj = BeautifulSoup(html, <span class="string">'html.parser'</span>)</span><br><span class="line">        <span class="comment"># 找到html中第一个属性class为lists的ul标签中的所有属性class为list-item的li标签，返回列表</span></span><br><span class="line">        movies = bsObj.find(<span class="string">'ul'</span>, &#123;<span class="string">"class"</span> : <span class="string">"lists"</span>&#125;).findAll(<span class="string">'li'</span>, &#123;<span class="string">"class"</span> : <span class="string">"list-item"</span>&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">return</span> movies</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><h3 id="4-从目标标签中获取目标内容"><a href="#4-从目标标签中获取目标内容" class="headerlink" title="4.从目标标签中获取目标内容"></a>4.从目标标签中获取目标内容</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;在获取到目标内容所在标签后，从标签中提取信息，写入文件或者存入数据库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">movies = getMovies(url)</span><br><span class="line"><span class="keyword">for</span> movie <span class="keyword">in</span> movies:</span><br><span class="line"><span class="comment"># 从标签中获取'data-title'属性，movie_name为'悟空传'</span></span><br><span class="line">movie_name = movie.attrs[<span class="string">'data-title'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从标签中获取'data-duration'属性，data-duration为'123分钟'</span></span><br><span class="line">movie_length = movie.attrs[<span class="string">'data-duratione'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写入文件</span></span><br><span class="line">filename = os.path.join(file_path, file_name)</span><br><span class="line"><span class="keyword">with</span> open(filename,<span class="string">'a+'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(movie_name)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之输入输出流</title>
      <link href="/2015/07/14/java-io/"/>
      <url>/2015/07/14/java-io/</url>
      
        <content type="html"><![CDATA[<h2 id="流-stream"><a href="#流-stream" class="headerlink" title="流(stream)"></a><strong>流(stream)</strong></h2><h3 id="1、字节流"><a href="#1、字节流" class="headerlink" title="1、字节流"></a>1、字节流</h3><a id="more"></a><h4 id="①-java-io-InputStream-字节输入流，是抽象类。"><a href="#①-java-io-InputStream-字节输入流，是抽象类。" class="headerlink" title="① java.io.InputStream 字节输入流，是抽象类。"></a>① <strong>java.io.InputStream</strong> 字节输入流，是抽象类。</h4><h5 id="InputStream的方法："><a href="#InputStream的方法：" class="headerlink" title="InputStream的方法："></a>InputStream的方法：</h5><ul><li><p>public abstract int <strong>read()</strong> throws IOException<br>从输入流中读取数据的下一个字节，返回下一个数据字节。当到达流末尾时返回 -1。该方法为阻塞方法。</p></li><li><p>public int <strong>read(byte[] b)</strong> throws IOException<br>从输入流中读取最多b.length的字节，并将其存储在缓冲区byte数组中。返回实际读取的字节数。如果b的长度为0，则不读取任何字节直接返回0。当到达流末尾时返回 -1。该方法为阻塞方法。</p></li><li><p>public int <strong>read(byte[] b,  int off,  int len)</strong>  throws IOException<br>从输入流中将最多len个数据字节读入byte数组。当输入流中实际的字节数少于len个时，读取的字节等于实际字节数。返回实际读取的字节数。如果 len为0，则不读取任何字节直接返回 0。当到达流末尾时返回 -1。该方法为阻塞方法。</p></li><li><p>public void <strong>close()</strong> throws IOException<br>关闭输入流并释放相关系统资源。</p></li><li><p>public long <strong>skip(long n)</strong> throws IOException<br>从输入流中跳过n个字节。返回跳过的实际字节数。当没跳过任何字节时，返回负数。跳过的字节数有可能小于n，也可能为 0。比如存在跳完n个字节之前就已到达文件末尾、跳时就已到达文件末尾等情况。</p></li><li><p>public int <strong>available()</strong> throws IOException</p></li><li><p>public void <strong>mark(int readlimit</strong>)<br>在输入流中标记当前的位置。</p></li><li><p>public void <strong>reset()</strong> throws IOException<br>将输入流重新定位到最后一次对此输入流调用mark方法时的位置。 </p></li><li><p>public boolean <strong>markSupported()</strong><br>查询输入流是否支持mark和reset方法。</p></li></ul><h5 id="InputStream的常用子类："><a href="#InputStream的常用子类：" class="headerlink" title="InputStream的常用子类："></a>InputStream的常用子类：</h5><ul><li>FileInputStream 从文件中读取字节流</li><li>ByteArrayInputStream 从数组中读取字节流</li><li>ObjectInputStream 从序列化对象文件中读取字节流</li><li>PipeInputStream 从管道中读取字节流</li><li>SequenceInputStream 将多个字节流合并后依次读取</li><li>AudioInputStream 从音频文件中读取字节流</li><li>FilterInputStream</li></ul><h4 id="②-java-io-OutputStream-字节输出流，是抽象类。"><a href="#②-java-io-OutputStream-字节输出流，是抽象类。" class="headerlink" title="② java.io.OutputStream 字节输出流，是抽象类。"></a>② <strong>java.io.OutputStream</strong> 字节输出流，是抽象类。</h4><h5 id="OutputStream的方法："><a href="#OutputStream的方法：" class="headerlink" title="OutputStream的方法："></a>OutputStream的方法：</h5><ul><li><p>public abstract void <strong>write(int b)</strong> throws IOException<br>将字节写入此输出流。 </p></li><li><p>public void <strong>write(byte[] b)</strong> throws IOException<br>将byte数组写入此输出流。</p></li><li><p>public void <strong>write(byte[] b,  int off,  int len)</strong> throws IOException<br>将byte数组中从偏移量off开始的len个字节写入输出流。</p></li><li><p>public void <strong>flush()</strong>  throws IOException<br>刷新输出流并强制写出所有缓冲的输出字节。</p></li><li><p>public void <strong>close()</strong> throws IOException<br>关闭输出流并释放相关系统资源。</p></li></ul><h5 id="OutputStream的常用子类："><a href="#OutputStream的常用子类：" class="headerlink" title="OutputStream的常用子类："></a>OutputStream的常用子类：</h5><ul><li>FileOutputStream</li><li>ObjectOutputStream</li><li>PipeOutputStream</li><li>FilterOutputStream</li><li>ByteArrayOutputStream</li><li>FilterOutputStream</li></ul><h3 id="2、字符流"><a href="#2、字符流" class="headerlink" title="2、字符流"></a>2、字符流</h3><h4 id="①java-io-Reader-字符输入流，是抽象类。"><a href="#①java-io-Reader-字符输入流，是抽象类。" class="headerlink" title="①java.io.Reader 字符输入流，是抽象类。"></a>①<strong>java.io.Reader</strong> 字符输入流，是抽象类。</h4><h5 id="Reader的子类："><a href="#Reader的子类：" class="headerlink" title="Reader的子类："></a>Reader的子类：</h5><ul><li>BufferedReader</li><li>InputStreamReader</li><li>FileReader</li><li>StringReader</li><li>CharArrayReader</li><li>PipedReader</li><li>FilterReader</li></ul><h4 id="②java-io-Writer-字符输出流，是抽象类。"><a href="#②java-io-Writer-字符输出流，是抽象类。" class="headerlink" title="②java.io.Writer 字符输出流，是抽象类。"></a>②<strong>java.io.Writer</strong> 字符输出流，是抽象类。</h4><h5 id="Writer的子类："><a href="#Writer的子类：" class="headerlink" title="Writer的子类："></a>Writer的子类：</h5><ul><li>BufferedWriter</li><li>OutputStreamWriter</li><li>FileWriter</li><li>StringWriter</li><li>CharArrayWriter</li><li>PipedWriter</li><li>FilterWriter</li><li>PrintWriter</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> io </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用排序算法</title>
      <link href="/2015/07/08/algorithm-sort/"/>
      <url>/2015/07/08/algorithm-sort/</url>
      
        <content type="html"><![CDATA[<p>常见排序算法：插入排序(直接插入排序、二分插入排序、希尔插入排序)、选择排序(直接选择排序、堆排序)、交换排序(冒泡排序、快速排序)、归并排序、基数排序。<br><a id="more"></a><br>不同的排序算法的时间复杂度、空间复杂度以及稳定性比较如下表:</p><center><br><img src="http://oznpemywy.bkt.clouddn.com/image/blog/sort-table.png" alt=""><br></center><p>以下为其java实现：</p><h3 id="1、直接插入排序"><a href="#1、直接插入排序" class="headerlink" title="1、直接插入排序"></a>1、直接插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 直接插入排序</span></span><br><span class="line"><span class="comment">     * 类型：插入排序</span></span><br><span class="line"><span class="comment">     * 稳定</span></span><br><span class="line"><span class="comment">     * 最优时间复杂度：\\(O(n)</span></span><br><span class="line"><span class="comment">     * 最坏时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 平均时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 空间复杂度： \\(O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">insertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//以第0个数为有序序列</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= end; i++)&#123;</span><br><span class="line">            <span class="comment">//将后边的数一次按大小插入前面的有序序列中，构成新的有序序列</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i-<span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)&#123;</span><br><span class="line">                <span class="comment">//交换</span></span><br><span class="line">                <span class="keyword">if</span>(array[j] &gt; array[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                    array[j + <span class="number">1</span>] = temp;</span><br><span class="line">                <span class="comment">//若不小于序列中最后一个数，直接开始下一次插入</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2、二分插入排序"><a href="#2、二分插入排序" class="headerlink" title="2、二分插入排序"></a>2、二分插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 二分插入排序</span></span><br><span class="line"><span class="comment">     * 类型：插入排序</span></span><br><span class="line"><span class="comment">     * 稳定</span></span><br><span class="line"><span class="comment">     * 最优时间复杂度：\\(O(nn*logn)</span></span><br><span class="line"><span class="comment">     * 最坏时间复杂度：\\(O(nn*logn)</span></span><br><span class="line"><span class="comment">     * 平均时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 空间复杂度： \\(O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">binaryInsertSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp, left, right, mid;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= end; i++)&#123;</span><br><span class="line">            left = <span class="number">0</span>;</span><br><span class="line">            right = i - <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//以二分法找到要插入的位置，减少了比较次数</span></span><br><span class="line">            <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">                mid = (left + right) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(array[mid] == array[i])&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(array[mid] &lt; array[i])&#123;</span><br><span class="line">                    left = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    right = mid - <span class="number">1</span>; </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left != i)&#123;</span><br><span class="line">                    <span class="comment">//插入以及其他元素后移</span></span><br><span class="line">                    temp = array[i];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &gt; left; k--)&#123;</span><br><span class="line">                        array[k] = array[k-<span class="number">1</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                    array[left] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="3、希尔插入排序"><a href="#3、希尔插入排序" class="headerlink" title="3、希尔插入排序"></a>3、希尔插入排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 希尔排序</span></span><br><span class="line"><span class="comment">     * 类型：插入排序</span></span><br><span class="line"><span class="comment">     * 不稳定</span></span><br><span class="line"><span class="comment">     * 最优时间复杂度：\\(O(n)</span></span><br><span class="line"><span class="comment">     * 最坏时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 平均时间复杂度：\\(O(n^1.5)</span></span><br><span class="line"><span class="comment">     * 空间复杂度： \\(O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = array.length;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="comment">//计算增量</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> increment = length / <span class="number">2</span>; increment &gt;= <span class="number">1</span>; increment /= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//每个增量下，子序列数量</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; increment; i++)&#123;</span><br><span class="line">                <span class="comment">//子序列插入排序</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i + increment; j &lt; length; j += increment)&#123;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = j ; k &gt; i; k -= increment)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(array[k] &lt; array[k - increment])&#123;</span><br><span class="line">                            temp = array[k];</span><br><span class="line">                            array[k] = array[k - increment];</span><br><span class="line">                            array[k - increment] = temp;</span><br><span class="line">                        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="4、直接选择排序"><a href="#4、直接选择排序" class="headerlink" title="4、直接选择排序"></a>4、直接选择排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 直接选择排序</span></span><br><span class="line"><span class="comment">     * 类型：选择排序</span></span><br><span class="line"><span class="comment">     * 不稳定</span></span><br><span class="line"><span class="comment">     * 最优时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 最坏时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 平均时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 空间复杂度： \\(O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selectSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> temp = <span class="number">0</span>, maxIndex;</span><br><span class="line">        <span class="keyword">int</span> end = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//遍历，找最小数依次交换到序列前部</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end ; i++)&#123;</span><br><span class="line">            <span class="comment">//设置最小值下标</span></span><br><span class="line">            maxIndex = i;</span><br><span class="line">            <span class="comment">//在有序序列后面，遍历寻找最小数，记录下标</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= end; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array[j] &lt; array[maxIndex])&#123;</span><br><span class="line">                    maxIndex = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(maxIndex != i)&#123;</span><br><span class="line">                temp = array[i];</span><br><span class="line">                array[i] = array[maxIndex];</span><br><span class="line">                array[maxIndex] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="5、堆排序"><a href="#5、堆排序" class="headerlink" title="5、堆排序"></a>5、堆排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6、冒泡排序"><a href="#6、冒泡排序" class="headerlink" title="6、冒泡排序"></a>6、冒泡排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 冒泡排序</span></span><br><span class="line"><span class="comment">     * 类型：交换排序</span></span><br><span class="line"><span class="comment">     * 稳定</span></span><br><span class="line"><span class="comment">     * 最优时间复杂度：\\(O(n)</span></span><br><span class="line"><span class="comment">     * 最坏时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 平均时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 空间复杂度： \\(O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> end = array.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">boolean</span> tag = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end &amp;&amp; tag; i++) &#123;</span><br><span class="line">            tag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">//将较大的数依次冒泡到序列尾部</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; end - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(array[j] &gt; array[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    tag = <span class="keyword">true</span>;  </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7、快速排序"><a href="#7、快速排序" class="headerlink" title="7、快速排序"></a>7、快速排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 快速排序</span></span><br><span class="line"><span class="comment">     * 类型：交换排序</span></span><br><span class="line"><span class="comment">     * 不稳定</span></span><br><span class="line"><span class="comment">     * 最优时间复杂度：\\(O(nn*logn)</span></span><br><span class="line"><span class="comment">     * 最坏时间复杂度：\\(O(n^2)</span></span><br><span class="line"><span class="comment">     * 平均空间复杂度：\\(O(nn*logn)</span></span><br><span class="line"><span class="comment">     * param: </span></span><br><span class="line"><span class="comment">     *   start 列表起始index</span></span><br><span class="line"><span class="comment">     *   end   列表结束index</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//递归结束条件</span></span><br><span class="line">        <span class="keyword">if</span>(start &gt;= end)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//取第一个数设为key值，之后将列表中比它小的数放在它左边，将比它大的数放在它右边</span></span><br><span class="line">        <span class="keyword">int</span> key = array[start];</span><br><span class="line">        <span class="comment">//设置左右游标</span></span><br><span class="line">        <span class="keyword">int</span> l = start,r = end;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            <span class="comment">//  先从右边开始比较，如果该值大于等于key，右游标前移</span></span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; array[r] &gt;= key)&#123;</span><br><span class="line">                r--;;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="comment">//找到比key小的值，赋值给左游标处的值</span></span><br><span class="line">                array[l] = array[r];</span><br><span class="line">                <span class="comment">//左游标后移</span></span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//  再从左边开始比较，如果该值小于key，左游标后移</span></span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; array[l] &lt; key)&#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(l &lt; r)&#123;</span><br><span class="line">                <span class="comment">//找到比key大的值，赋值给右游标处的值</span></span><br><span class="line">                array[r] = array[l];</span><br><span class="line">                <span class="comment">//右游标前移</span></span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 一次排序结束，将key放到中间</span></span><br><span class="line">        array[l] = key;</span><br><span class="line">        <span class="comment">//对key左边的序列快排</span></span><br><span class="line">        quickSort(array, start, l);</span><br><span class="line">        <span class="comment">//对key右边的序列快排</span></span><br><span class="line">        quickSort(array, l+<span class="number">1</span>, end);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="8、归并排序"><a href="#8、归并排序" class="headerlink" title="8、归并排序"></a>8、归并排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 归并排序</span></span><br><span class="line"><span class="comment">     * 稳定</span></span><br><span class="line"><span class="comment">     * 最优时间复杂度：\\(O(nn*logn)</span></span><br><span class="line"><span class="comment">     * 最坏时间复杂度：\\(O(nn*logn)</span></span><br><span class="line"><span class="comment">     * 平均时间复杂度：\\(O(nn*logn)</span></span><br><span class="line"><span class="comment">     * 空间复杂度： \\(O(1)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end, <span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start &lt; end)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (start + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="comment">//左边继续归并排序</span></span><br><span class="line">            mergeSort(array, start, mid, temp);</span><br><span class="line">            <span class="comment">//右边继续归并排序</span></span><br><span class="line">            mergeSort(array, mid + <span class="number">1</span>, end, temp);</span><br><span class="line">            <span class="comment">//合并左右两边</span></span><br><span class="line">            mergeArray(array, start, mid, end, temp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 数组合并</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeArray</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> first, <span class="keyword">int</span> mid, <span class="keyword">int</span> last, <span class="keyword">int</span>[] temp)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = first, j = mid + <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> m = mid, n = last;</span><br><span class="line">        <span class="comment">//合并两个有序数组到临时数组，依次先取较小的放入</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m &amp;&amp; j &lt;= n)&#123;</span><br><span class="line">            <span class="keyword">if</span>(array[i] &lt;= array[j])&#123;</span><br><span class="line">                temp[k++] = array[i++];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                temp[k++] = array[j++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果两个数组长度不等，将较长数组中剩下的数放入合并后的数组中</span></span><br><span class="line">        <span class="keyword">while</span>(i &lt;= m)&#123;</span><br><span class="line">            temp[k++] = array[i++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(j &lt;= n)&#123;</span><br><span class="line">            temp[k++] = array[j++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将合并后的数组复制到原数组</span></span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i&lt; k; i++)&#123;</span><br><span class="line">            array[first + i] = temp[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="9、基数排序"><a href="#9、基数排序" class="headerlink" title="9、基数排序"></a>9、基数排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Test</title>
      <link href="/2015/01/14/test/"/>
      <url>/2015/01/14/test/</url>
      
        <content type="html"><![CDATA[<a id="more"></a>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
